"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neondatabase";
exports.ids = ["vendor-chunks/@neondatabase"];
exports.modules = {

/***/ "(rsc)/./node_modules/@neondatabase/serverless/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@neondatabase/serverless/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ ut),\n/* harmony export */   DatabaseError: () => (/* binding */ export_DatabaseError),\n/* harmony export */   NeonDbError: () => (/* binding */ we),\n/* harmony export */   NeonQueryPromise: () => (/* binding */ Ae),\n/* harmony export */   Pool: () => (/* binding */ Ln),\n/* harmony export */   SqlTemplate: () => (/* binding */ $e),\n/* harmony export */   UnsafeRawSql: () => (/* binding */ Ge),\n/* harmony export */   _bundleExt: () => (/* binding */ _p),\n/* harmony export */   defaults: () => (/* binding */ export_defaults),\n/* harmony export */   neon: () => (/* binding */ as),\n/* harmony export */   neonConfig: () => (/* binding */ ge),\n/* harmony export */   types: () => (/* binding */ export_types)\n/* harmony export */ });\nvar vo = Object.create;\nvar Te = Object.defineProperty;\nvar xo = Object.getOwnPropertyDescriptor;\nvar So = Object.getOwnPropertyNames;\nvar Eo = Object.getPrototypeOf, Ao = Object.prototype.hasOwnProperty;\nvar Co = (r, e, t)=>e in r ? Te(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t;\nvar a = (r, e)=>Te(r, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar z = (r, e)=>()=>(r && (e = r(r = 0)), e);\nvar I = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), ne = (r, e)=>{\n    for(var t in e)Te(r, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, Mn = (r, e, t, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of So(e))!Ao.call(r, i) && i !== t && Te(r, i, {\n        get: ()=>e[i],\n        enumerable: !(n = xo(e, i)) || n.enumerable\n    });\n    return r;\n};\nvar xe = (r, e, t)=>(t = r != null ? vo(Eo(r)) : {}, Mn(e || !r || !r.__esModule ? Te(t, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : t, r)), D = (r)=>Mn(Te({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar E = (r, e, t)=>Co(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nvar On = I((ct)=>{\n    \"use strict\";\n    p();\n    ct.byteLength = To;\n    ct.toByteArray = Po;\n    ct.fromByteArray = Lo;\n    var ue = [], ee = [], _o = typeof Uint8Array < \"u\" ? Uint8Array : Array, Ut = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(Se = 0, Un = Ut.length; Se < Un; ++Se)ue[Se] = Ut[Se], ee[Ut.charCodeAt(Se)] = Se;\n    var Se, Un;\n    ee[45] = 62;\n    ee[95] = 63;\n    function Dn(r) {\n        var e = r.length;\n        if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        var t = r.indexOf(\"=\");\n        t === -1 && (t = e);\n        var n = t === e ? 0 : 4 - t % 4;\n        return [\n            t,\n            n\n        ];\n    }\n    a(Dn, \"getLens\");\n    function To(r) {\n        var e = Dn(r), t = e[0], n = e[1];\n        return (t + n) * 3 / 4 - n;\n    }\n    a(To, \"byteLength\");\n    function Io(r, e, t) {\n        return (e + t) * 3 / 4 - t;\n    }\n    a(Io, \"_byteLength\");\n    function Po(r) {\n        var e, t = Dn(r), n = t[0], i = t[1], s = new _o(Io(r, n, i)), o = 0, u = i > 0 ? n - 4 : n, c;\n        for(c = 0; c < u; c += 4)e = ee[r.charCodeAt(c)] << 18 | ee[r.charCodeAt(c + 1)] << 12 | ee[r.charCodeAt(c + 2)] << 6 | ee[r.charCodeAt(c + 3)], s[o++] = e >> 16 & 255, s[o++] = e >> 8 & 255, s[o++] = e & 255;\n        return i === 2 && (e = ee[r.charCodeAt(c)] << 2 | ee[r.charCodeAt(c + 1)] >> 4, s[o++] = e & 255), i === 1 && (e = ee[r.charCodeAt(c)] << 10 | ee[r.charCodeAt(c + 1)] << 4 | ee[r.charCodeAt(c + 2)] >> 2, s[o++] = e >> 8 & 255, s[o++] = e & 255), s;\n    }\n    a(Po, \"toByteArray\");\n    function Ro(r) {\n        return ue[r >> 18 & 63] + ue[r >> 12 & 63] + ue[r >> 6 & 63] + ue[r & 63];\n    }\n    a(Ro, \"tripletToBase64\");\n    function Bo(r, e, t) {\n        for(var n, i = [], s = e; s < t; s += 3)n = (r[s] << 16 & 16711680) + (r[s + 1] << 8 & 65280) + (r[s + 2] & 255), i.push(Ro(n));\n        return i.join(\"\");\n    }\n    a(Bo, \"encodeChunk\");\n    function Lo(r) {\n        for(var e, t = r.length, n = t % 3, i = [], s = 16383, o = 0, u = t - n; o < u; o += s)i.push(Bo(r, o, o + s > u ? u : o + s));\n        return n === 1 ? (e = r[t - 1], i.push(ue[e >> 2] + ue[e << 4 & 63] + \"==\")) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], i.push(ue[e >> 10] + ue[e >> 4 & 63] + ue[e << 2 & 63] + \"=\")), i.join(\"\");\n    }\n    a(Lo, \"fromByteArray\");\n});\nvar qn = I((Dt)=>{\n    p();\n    Dt.read = function(r, e, t, n, i) {\n        var s, o, u = i * 8 - n - 1, c = (1 << u) - 1, l = c >> 1, f = -7, y = t ? i - 1 : 0, g = t ? -1 : 1, A = r[e + y];\n        for(y += g, s = A & (1 << -f) - 1, A >>= -f, f += u; f > 0; s = s * 256 + r[e + y], y += g, f -= 8);\n        for(o = s & (1 << -f) - 1, s >>= -f, f += n; f > 0; o = o * 256 + r[e + y], y += g, f -= 8);\n        if (s === 0) s = 1 - l;\n        else {\n            if (s === c) return o ? NaN : (A ? -1 : 1) * (1 / 0);\n            o = o + Math.pow(2, n), s = s - l;\n        }\n        return (A ? -1 : 1) * o * Math.pow(2, s - n);\n    };\n    Dt.write = function(r, e, t, n, i, s) {\n        var o, u, c, l = s * 8 - i - 1, f = (1 << l) - 1, y = f >> 1, g = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, A = n ? 0 : s - 1, C = n ? 1 : -1, Q = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = f) : (o = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), o + y >= 1 ? e += g / c : e += g * Math.pow(2, 1 - y), e * c >= 2 && (o++, c /= 2), o + y >= f ? (u = 0, o = f) : o + y >= 1 ? (u = (e * c - 1) * Math.pow(2, i), o = o + y) : (u = e * Math.pow(2, y - 1) * Math.pow(2, i), o = 0)); i >= 8; r[t + A] = u & 255, A += C, u /= 256, i -= 8);\n        for(o = o << i | u, l += i; l > 0; r[t + A] = o & 255, A += C, o /= 256, l -= 8);\n        r[t + A - C] |= Q * 128;\n    };\n});\nvar ri = I((Be)=>{\n    \"use strict\";\n    p();\n    var Ot = On(), Pe = qn(), Qn = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    Be.Buffer = h;\n    Be.SlowBuffer = Oo;\n    Be.INSPECT_MAX_BYTES = 50;\n    var lt = 2147483647;\n    Be.kMaxLength = lt;\n    h.TYPED_ARRAY_SUPPORT = Fo();\n    !h.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    function Fo() {\n        try {\n            let r = new Uint8Array(1), e = {\n                foo: a(function() {\n                    return 42;\n                }, \"foo\")\n            };\n            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(r, e), r.foo() === 42;\n        } catch  {\n            return !1;\n        }\n    }\n    a(Fo, \"typedArraySupport\");\n    Object.defineProperty(h.prototype, \"parent\", {\n        enumerable: !0,\n        get: a(function() {\n            if (h.isBuffer(this)) return this.buffer;\n        }, \"get\")\n    });\n    Object.defineProperty(h.prototype, \"offset\", {\n        enumerable: !0,\n        get: a(function() {\n            if (h.isBuffer(this)) return this.byteOffset;\n        }, \"get\")\n    });\n    function pe(r) {\n        if (r > lt) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n        let e = new Uint8Array(r);\n        return Object.setPrototypeOf(e, h.prototype), e;\n    }\n    a(pe, \"createBuffer\");\n    function h(r, e, t) {\n        if (typeof r == \"number\") {\n            if (typeof e == \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n            return jt(r);\n        }\n        return Hn(r, e, t);\n    }\n    a(h, \"Buffer\");\n    h.poolSize = 8192;\n    function Hn(r, e, t) {\n        if (typeof r == \"string\") return Mo(r, e);\n        if (ArrayBuffer.isView(r)) return Uo(r);\n        if (r == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n        if (ce(r, ArrayBuffer) || r && ce(r.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (ce(r, SharedArrayBuffer) || r && ce(r.buffer, SharedArrayBuffer))) return Qt(r, e, t);\n        if (typeof r == \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        let n = r.valueOf && r.valueOf();\n        if (n != null && n !== r) return h.from(n, e, t);\n        let i = Do(r);\n        if (i) return i;\n        if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof r[Symbol.toPrimitive] == \"function\") return h.from(r[Symbol.toPrimitive](\"string\"), e, t);\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n    }\n    a(Hn, \"from\");\n    h.from = function(r, e, t) {\n        return Hn(r, e, t);\n    };\n    Object.setPrototypeOf(h.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(h, Uint8Array);\n    function $n(r) {\n        if (typeof r != \"number\") throw new TypeError('\"size\" argument must be of type number');\n        if (r < 0) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n    }\n    a($n, \"assertSize\");\n    function ko(r, e, t) {\n        return $n(r), r <= 0 ? pe(r) : e !== void 0 ? typeof t == \"string\" ? pe(r).fill(e, t) : pe(r).fill(e) : pe(r);\n    }\n    a(ko, \"alloc\");\n    h.alloc = function(r, e, t) {\n        return ko(r, e, t);\n    };\n    function jt(r) {\n        return $n(r), pe(r < 0 ? 0 : Wt(r) | 0);\n    }\n    a(jt, \"allocUnsafe\");\n    h.allocUnsafe = function(r) {\n        return jt(r);\n    };\n    h.allocUnsafeSlow = function(r) {\n        return jt(r);\n    };\n    function Mo(r, e) {\n        if ((typeof e != \"string\" || e === \"\") && (e = \"utf8\"), !h.isEncoding(e)) throw new TypeError(\"Unknown encoding: \" + e);\n        let t = Gn(r, e) | 0, n = pe(t), i = n.write(r, e);\n        return i !== t && (n = n.slice(0, i)), n;\n    }\n    a(Mo, \"fromString\");\n    function qt(r) {\n        let e = r.length < 0 ? 0 : Wt(r.length) | 0, t = pe(e);\n        for(let n = 0; n < e; n += 1)t[n] = r[n] & 255;\n        return t;\n    }\n    a(qt, \"fromArrayLike\");\n    function Uo(r) {\n        if (ce(r, Uint8Array)) {\n            let e = new Uint8Array(r);\n            return Qt(e.buffer, e.byteOffset, e.byteLength);\n        }\n        return qt(r);\n    }\n    a(Uo, \"fromArrayView\");\n    function Qt(r, e, t) {\n        if (e < 0 || r.byteLength < e) throw new RangeError('\"offset\" is outside of buffer bounds');\n        if (r.byteLength < e + (t || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n        let n;\n        return e === void 0 && t === void 0 ? n = new Uint8Array(r) : t === void 0 ? n = new Uint8Array(r, e) : n = new Uint8Array(r, e, t), Object.setPrototypeOf(n, h.prototype), n;\n    }\n    a(Qt, \"fromArrayBuffer\");\n    function Do(r) {\n        if (h.isBuffer(r)) {\n            let e = Wt(r.length) | 0, t = pe(e);\n            return t.length === 0 || r.copy(t, 0, 0, e), t;\n        }\n        if (r.length !== void 0) return typeof r.length != \"number\" || $t(r.length) ? pe(0) : qt(r);\n        if (r.type === \"Buffer\" && Array.isArray(r.data)) return qt(r.data);\n    }\n    a(Do, \"fromObject\");\n    function Wt(r) {\n        if (r >= lt) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + lt.toString(16) + \" bytes\");\n        return r | 0;\n    }\n    a(Wt, \"checked\");\n    function Oo(r) {\n        return +r != r && (r = 0), h.alloc(+r);\n    }\n    a(Oo, \"SlowBuffer\");\n    h.isBuffer = a(function(e) {\n        return e != null && e._isBuffer === !0 && e !== h.prototype;\n    }, \"isBuffer\");\n    h.compare = a(function(e, t) {\n        if (ce(e, Uint8Array) && (e = h.from(e, e.offset, e.byteLength)), ce(t, Uint8Array) && (t = h.from(t, t.offset, t.byteLength)), !h.isBuffer(e) || !h.isBuffer(t)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        if (e === t) return 0;\n        let n = e.length, i = t.length;\n        for(let s = 0, o = Math.min(n, i); s < o; ++s)if (e[s] !== t[s]) {\n            n = e[s], i = t[s];\n            break;\n        }\n        return n < i ? -1 : i < n ? 1 : 0;\n    }, \"compare\");\n    h.isEncoding = a(function(e) {\n        switch(String(e).toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return !0;\n            default:\n                return !1;\n        }\n    }, \"isEncoding\");\n    h.concat = a(function(e, t) {\n        if (!Array.isArray(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        if (e.length === 0) return h.alloc(0);\n        let n;\n        if (t === void 0) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n        let i = h.allocUnsafe(t), s = 0;\n        for(n = 0; n < e.length; ++n){\n            let o = e[n];\n            if (ce(o, Uint8Array)) s + o.length > i.length ? (h.isBuffer(o) || (o = h.from(o)), o.copy(i, s)) : Uint8Array.prototype.set.call(i, o, s);\n            else if (h.isBuffer(o)) o.copy(i, s);\n            else throw new TypeError('\"list\" argument must be an Array of Buffers');\n            s += o.length;\n        }\n        return i;\n    }, \"concat\");\n    function Gn(r, e) {\n        if (h.isBuffer(r)) return r.length;\n        if (ArrayBuffer.isView(r) || ce(r, ArrayBuffer)) return r.byteLength;\n        if (typeof r != \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof r);\n        let t = r.length, n = arguments.length > 2 && arguments[2] === !0;\n        if (!n && t === 0) return 0;\n        let i = !1;\n        for(;;)switch(e){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return t;\n            case \"utf8\":\n            case \"utf-8\":\n                return Nt(r).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return t * 2;\n            case \"hex\":\n                return t >>> 1;\n            case \"base64\":\n                return ti(r).length;\n            default:\n                if (i) return n ? -1 : Nt(r).length;\n                e = (\"\" + e).toLowerCase(), i = !0;\n        }\n    }\n    a(Gn, \"byteLength\");\n    h.byteLength = Gn;\n    function qo(r, e, t) {\n        let n = !1;\n        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, e >>>= 0, t <= e)) return \"\";\n        for(r || (r = \"utf8\");;)switch(r){\n            case \"hex\":\n                return Ko(this, e, t);\n            case \"utf8\":\n            case \"utf-8\":\n                return zn(this, e, t);\n            case \"ascii\":\n                return Vo(this, e, t);\n            case \"latin1\":\n            case \"binary\":\n                return zo(this, e, t);\n            case \"base64\":\n                return $o(this, e, t);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Yo(this, e, t);\n            default:\n                if (n) throw new TypeError(\"Unknown encoding: \" + r);\n                r = (r + \"\").toLowerCase(), n = !0;\n        }\n    }\n    a(qo, \"slowToString\");\n    h.prototype._isBuffer = !0;\n    function Ee(r, e, t) {\n        let n = r[e];\n        r[e] = r[t], r[t] = n;\n    }\n    a(Ee, \"swap\");\n    h.prototype.swap16 = a(function() {\n        let e = this.length;\n        if (e % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        for(let t = 0; t < e; t += 2)Ee(this, t, t + 1);\n        return this;\n    }, \"swap16\");\n    h.prototype.swap32 = a(function() {\n        let e = this.length;\n        if (e % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        for(let t = 0; t < e; t += 4)Ee(this, t, t + 3), Ee(this, t + 1, t + 2);\n        return this;\n    }, \"swap32\");\n    h.prototype.swap64 = a(function() {\n        let e = this.length;\n        if (e % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        for(let t = 0; t < e; t += 8)Ee(this, t, t + 7), Ee(this, t + 1, t + 6), Ee(this, t + 2, t + 5), Ee(this, t + 3, t + 4);\n        return this;\n    }, \"swap64\");\n    h.prototype.toString = a(function() {\n        let e = this.length;\n        return e === 0 ? \"\" : arguments.length === 0 ? zn(this, 0, e) : qo.apply(this, arguments);\n    }, \"toString\");\n    h.prototype.toLocaleString = h.prototype.toString;\n    h.prototype.equals = a(function(e) {\n        if (!h.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n        return this === e ? !0 : h.compare(this, e) === 0;\n    }, \"equals\");\n    h.prototype.inspect = a(function() {\n        let e = \"\", t = Be.INSPECT_MAX_BYTES;\n        return e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim(), this.length > t && (e += \" ... \"), \"<Buffer \" + e + \">\";\n    }, \"inspect\");\n    Qn && (h.prototype[Qn] = h.prototype.inspect);\n    h.prototype.compare = a(function(e, t, n, i, s) {\n        if (ce(e, Uint8Array) && (e = h.from(e, e.offset, e.byteLength)), !h.isBuffer(e)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);\n        if (t === void 0 && (t = 0), n === void 0 && (n = e ? e.length : 0), i === void 0 && (i = 0), s === void 0 && (s = this.length), t < 0 || n > e.length || i < 0 || s > this.length) throw new RangeError(\"out of range index\");\n        if (i >= s && t >= n) return 0;\n        if (i >= s) return -1;\n        if (t >= n) return 1;\n        if (t >>>= 0, n >>>= 0, i >>>= 0, s >>>= 0, this === e) return 0;\n        let o = s - i, u = n - t, c = Math.min(o, u), l = this.slice(i, s), f = e.slice(t, n);\n        for(let y = 0; y < c; ++y)if (l[y] !== f[y]) {\n            o = l[y], u = f[y];\n            break;\n        }\n        return o < u ? -1 : u < o ? 1 : 0;\n    }, \"compare\");\n    function Vn(r, e, t, n, i) {\n        if (r.length === 0) return -1;\n        if (typeof t == \"string\" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, $t(t) && (t = i ? 0 : r.length - 1), t < 0 && (t = r.length + t), t >= r.length) {\n            if (i) return -1;\n            t = r.length - 1;\n        } else if (t < 0) if (i) t = 0;\n        else return -1;\n        if (typeof e == \"string\" && (e = h.from(e, n)), h.isBuffer(e)) return e.length === 0 ? -1 : Nn(r, e, t, n, i);\n        if (typeof e == \"number\") return e = e & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? i ? Uint8Array.prototype.indexOf.call(r, e, t) : Uint8Array.prototype.lastIndexOf.call(r, e, t) : Nn(r, [\n            e\n        ], t, n, i);\n        throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    a(Vn, \"bidirectionalIndexOf\");\n    function Nn(r, e, t, n, i) {\n        let s = 1, o = r.length, u = e.length;\n        if (n !== void 0 && (n = String(n).toLowerCase(), n === \"ucs2\" || n === \"ucs-2\" || n === \"utf16le\" || n === \"utf-16le\")) {\n            if (r.length < 2 || e.length < 2) return -1;\n            s = 2, o /= 2, u /= 2, t /= 2;\n        }\n        function c(f, y) {\n            return s === 1 ? f[y] : f.readUInt16BE(y * s);\n        }\n        a(c, \"read\");\n        let l;\n        if (i) {\n            let f = -1;\n            for(l = t; l < o; l++)if (c(r, l) === c(e, f === -1 ? 0 : l - f)) {\n                if (f === -1 && (f = l), l - f + 1 === u) return f * s;\n            } else f !== -1 && (l -= l - f), f = -1;\n        } else for(t + u > o && (t = o - u), l = t; l >= 0; l--){\n            let f = !0;\n            for(let y = 0; y < u; y++)if (c(r, l + y) !== c(e, y)) {\n                f = !1;\n                break;\n            }\n            if (f) return l;\n        }\n        return -1;\n    }\n    a(Nn, \"arrayIndexOf\");\n    h.prototype.includes = a(function(e, t, n) {\n        return this.indexOf(e, t, n) !== -1;\n    }, \"includes\");\n    h.prototype.indexOf = a(function(e, t, n) {\n        return Vn(this, e, t, n, !0);\n    }, \"indexOf\");\n    h.prototype.lastIndexOf = a(function(e, t, n) {\n        return Vn(this, e, t, n, !1);\n    }, \"lastIndexOf\");\n    function Qo(r, e, t, n) {\n        t = Number(t) || 0;\n        let i = r.length - t;\n        n ? (n = Number(n), n > i && (n = i)) : n = i;\n        let s = e.length;\n        n > s / 2 && (n = s / 2);\n        let o;\n        for(o = 0; o < n; ++o){\n            let u = parseInt(e.substr(o * 2, 2), 16);\n            if ($t(u)) return o;\n            r[t + o] = u;\n        }\n        return o;\n    }\n    a(Qo, \"hexWrite\");\n    function No(r, e, t, n) {\n        return ft(Nt(e, r.length - t), r, t, n);\n    }\n    a(No, \"utf8Write\");\n    function jo(r, e, t, n) {\n        return ft(ea(e), r, t, n);\n    }\n    a(jo, \"asciiWrite\");\n    function Wo(r, e, t, n) {\n        return ft(ti(e), r, t, n);\n    }\n    a(Wo, \"base64Write\");\n    function Ho(r, e, t, n) {\n        return ft(ta(e, r.length - t), r, t, n);\n    }\n    a(Ho, \"ucs2Write\");\n    h.prototype.write = a(function(e, t, n, i) {\n        if (t === void 0) i = \"utf8\", n = this.length, t = 0;\n        else if (n === void 0 && typeof t == \"string\") i = t, n = this.length, t = 0;\n        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = \"utf8\")) : (i = n, n = void 0);\n        else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        let s = this.length - t;\n        if ((n === void 0 || n > s) && (n = s), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n        i || (i = \"utf8\");\n        let o = !1;\n        for(;;)switch(i){\n            case \"hex\":\n                return Qo(this, e, t, n);\n            case \"utf8\":\n            case \"utf-8\":\n                return No(this, e, t, n);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return jo(this, e, t, n);\n            case \"base64\":\n                return Wo(this, e, t, n);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Ho(this, e, t, n);\n            default:\n                if (o) throw new TypeError(\"Unknown encoding: \" + i);\n                i = (\"\" + i).toLowerCase(), o = !0;\n        }\n    }, \"write\");\n    h.prototype.toJSON = a(function() {\n        return {\n            type: \"Buffer\",\n            data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n    }, \"toJSON\");\n    function $o(r, e, t) {\n        return e === 0 && t === r.length ? Ot.fromByteArray(r) : Ot.fromByteArray(r.slice(e, t));\n    }\n    a($o, \"base64Slice\");\n    function zn(r, e, t) {\n        t = Math.min(r.length, t);\n        let n = [], i = e;\n        for(; i < t;){\n            let s = r[i], o = null, u = s > 239 ? 4 : s > 223 ? 3 : s > 191 ? 2 : 1;\n            if (i + u <= t) {\n                let c, l, f, y;\n                switch(u){\n                    case 1:\n                        s < 128 && (o = s);\n                        break;\n                    case 2:\n                        c = r[i + 1], (c & 192) === 128 && (y = (s & 31) << 6 | c & 63, y > 127 && (o = y));\n                        break;\n                    case 3:\n                        c = r[i + 1], l = r[i + 2], (c & 192) === 128 && (l & 192) === 128 && (y = (s & 15) << 12 | (c & 63) << 6 | l & 63, y > 2047 && (y < 55296 || y > 57343) && (o = y));\n                        break;\n                    case 4:\n                        c = r[i + 1], l = r[i + 2], f = r[i + 3], (c & 192) === 128 && (l & 192) === 128 && (f & 192) === 128 && (y = (s & 15) << 18 | (c & 63) << 12 | (l & 63) << 6 | f & 63, y > 65535 && y < 1114112 && (o = y));\n                }\n            }\n            o === null ? (o = 65533, u = 1) : o > 65535 && (o -= 65536, n.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), n.push(o), i += u;\n        }\n        return Go(n);\n    }\n    a(zn, \"utf8Slice\");\n    var jn = 4096;\n    function Go(r) {\n        let e = r.length;\n        if (e <= jn) return String.fromCharCode.apply(String, r);\n        let t = \"\", n = 0;\n        for(; n < e;)t += String.fromCharCode.apply(String, r.slice(n, n += jn));\n        return t;\n    }\n    a(Go, \"decodeCodePointsArray\");\n    function Vo(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i] & 127);\n        return n;\n    }\n    a(Vo, \"asciiSlice\");\n    function zo(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i]);\n        return n;\n    }\n    a(zo, \"latin1Slice\");\n    function Ko(r, e, t) {\n        let n = r.length;\n        (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);\n        let i = \"\";\n        for(let s = e; s < t; ++s)i += ra[r[s]];\n        return i;\n    }\n    a(Ko, \"hexSlice\");\n    function Yo(r, e, t) {\n        let n = r.slice(e, t), i = \"\";\n        for(let s = 0; s < n.length - 1; s += 2)i += String.fromCharCode(n[s] + n[s + 1] * 256);\n        return i;\n    }\n    a(Yo, \"utf16leSlice\");\n    h.prototype.slice = a(function(e, t) {\n        let n = this.length;\n        e = ~~e, t = t === void 0 ? n : ~~t, e < 0 ? (e += n, e < 0 && (e = 0)) : e > n && (e = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < e && (t = e);\n        let i = this.subarray(e, t);\n        return Object.setPrototypeOf(i, h.prototype), i;\n    }, \"slice\");\n    function O(r, e, t) {\n        if (r % 1 !== 0 || r < 0) throw new RangeError(\"offset is not uint\");\n        if (r + e > t) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    a(O, \"checkOffset\");\n    h.prototype.readUintLE = h.prototype.readUIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || O(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return i;\n    }, \"readUIntLE\");\n    h.prototype.readUintBE = h.prototype.readUIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || O(e, t, this.length);\n        let i = this[e + --t], s = 1;\n        for(; t > 0 && (s *= 256);)i += this[e + --t] * s;\n        return i;\n    }, \"readUIntBE\");\n    h.prototype.readUint8 = h.prototype.readUInt8 = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 1, this.length), this[e];\n    }, \"readUInt8\");\n    h.prototype.readUint16LE = h.prototype.readUInt16LE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 2, this.length), this[e] | this[e + 1] << 8;\n    }, \"readUInt16LE\");\n    h.prototype.readUint16BE = h.prototype.readUInt16BE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 2, this.length), this[e] << 8 | this[e + 1];\n    }, \"readUInt16BE\");\n    h.prototype.readUint32LE = h.prototype.readUInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n    }, \"readUInt32LE\");\n    h.prototype.readUint32BE = h.prototype.readUInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n    }, \"readUInt32BE\");\n    h.prototype.readBigUInt64LE = ye(a(function(e) {\n        e = e >>> 0, Re(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, s = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + n * 2 ** 24;\n        return BigInt(i) + (BigInt(s) << BigInt(32));\n    }, \"readBigUInt64LE\"));\n    h.prototype.readBigUInt64BE = ye(a(function(e) {\n        e = e >>> 0, Re(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], s = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n;\n        return (BigInt(i) << BigInt(32)) + BigInt(s);\n    }, \"readBigUInt64BE\"));\n    h.prototype.readIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || O(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return s *= 128, i >= s && (i -= Math.pow(2, 8 * t)), i;\n    }, \"readIntLE\");\n    h.prototype.readIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || O(e, t, this.length);\n        let i = t, s = 1, o = this[e + --i];\n        for(; i > 0 && (s *= 256);)o += this[e + --i] * s;\n        return s *= 128, o >= s && (o -= Math.pow(2, 8 * t)), o;\n    }, \"readIntBE\");\n    h.prototype.readInt8 = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];\n    }, \"readInt8\");\n    h.prototype.readInt16LE = a(function(e, t) {\n        e = e >>> 0, t || O(e, 2, this.length);\n        let n = this[e] | this[e + 1] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16LE\");\n    h.prototype.readInt16BE = a(function(e, t) {\n        e = e >>> 0, t || O(e, 2, this.length);\n        let n = this[e + 1] | this[e] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16BE\");\n    h.prototype.readInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n    }, \"readInt32LE\");\n    h.prototype.readInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n    }, \"readInt32BE\");\n    h.prototype.readBigInt64LE = ye(a(function(e) {\n        e = e >>> 0, Re(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (n << 24);\n        return (BigInt(i) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);\n    }, \"readBigInt64LE\"));\n    h.prototype.readBigInt64BE = ye(a(function(e) {\n        e = e >>> 0, Re(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];\n        return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n);\n    }, \"readBigInt64BE\"));\n    h.prototype.readFloatLE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 4, this.length), Pe.read(this, e, !0, 23, 4);\n    }, \"readFloatLE\");\n    h.prototype.readFloatBE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 4, this.length), Pe.read(this, e, !1, 23, 4);\n    }, \"readFloatBE\");\n    h.prototype.readDoubleLE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 8, this.length), Pe.read(this, e, !0, 52, 8);\n    }, \"readDoubleLE\");\n    h.prototype.readDoubleBE = a(function(e, t) {\n        return e = e >>> 0, t || O(e, 8, this.length), Pe.read(this, e, !1, 52, 8);\n    }, \"readDoubleBE\");\n    function K(r, e, t, n, i, s) {\n        if (!h.isBuffer(r)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (e > i || e < s) throw new RangeError('\"value\" argument is out of bounds');\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n    }\n    a(K, \"checkInt\");\n    h.prototype.writeUintLE = h.prototype.writeUIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            K(this, e, t, n, u, 0);\n        }\n        let s = 1, o = 0;\n        for(this[t] = e & 255; ++o < n && (s *= 256);)this[t + o] = e / s & 255;\n        return t + n;\n    }, \"writeUIntLE\");\n    h.prototype.writeUintBE = h.prototype.writeUIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            K(this, e, t, n, u, 0);\n        }\n        let s = n - 1, o = 1;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)this[t + s] = e / o & 255;\n        return t + n;\n    }, \"writeUIntBE\");\n    h.prototype.writeUint8 = h.prototype.writeUInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1;\n    }, \"writeUInt8\");\n    h.prototype.writeUint16LE = h.prototype.writeUInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeUInt16LE\");\n    h.prototype.writeUint16BE = h.prototype.writeUInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeUInt16BE\");\n    h.prototype.writeUint32LE = h.prototype.writeUInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4;\n    }, \"writeUInt32LE\");\n    h.prototype.writeUint32BE = h.prototype.writeUInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeUInt32BE\");\n    function Kn(r, e, t, n, i) {\n        ei(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, t;\n    }\n    a(Kn, \"wrtBigUInt64LE\");\n    function Yn(r, e, t, n, i) {\n        ei(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t + 7] = s, s = s >> 8, r[t + 6] = s, s = s >> 8, r[t + 5] = s, s = s >> 8, r[t + 4] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t + 3] = o, o = o >> 8, r[t + 2] = o, o = o >> 8, r[t + 1] = o, o = o >> 8, r[t] = o, t + 8;\n    }\n    a(Yn, \"wrtBigUInt64BE\");\n    h.prototype.writeBigUInt64LE = ye(a(function(e, t = 0) {\n        return Kn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64LE\"));\n    h.prototype.writeBigUInt64BE = ye(a(function(e, t = 0) {\n        return Yn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64BE\"));\n    h.prototype.writeIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            K(this, e, t, n, c - 1, -c);\n        }\n        let s = 0, o = 1, u = 0;\n        for(this[t] = e & 255; ++s < n && (o *= 256);)e < 0 && u === 0 && this[t + s - 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntLE\");\n    h.prototype.writeIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            K(this, e, t, n, c - 1, -c);\n        }\n        let s = n - 1, o = 1, u = 0;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)e < 0 && u === 0 && this[t + s + 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntBE\");\n    h.prototype.writeInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1;\n    }, \"writeInt8\");\n    h.prototype.writeInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeInt16LE\");\n    h.prototype.writeInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeInt16BE\");\n    h.prototype.writeInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n    }, \"writeInt32LE\");\n    h.prototype.writeInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || K(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeInt32BE\");\n    h.prototype.writeBigInt64LE = ye(a(function(e, t = 0) {\n        return Kn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64LE\"));\n    h.prototype.writeBigInt64BE = ye(a(function(e, t = 0) {\n        return Yn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64BE\"));\n    function Zn(r, e, t, n, i, s) {\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n        if (t < 0) throw new RangeError(\"Index out of range\");\n    }\n    a(Zn, \"checkIEEE754\");\n    function Jn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Zn(r, e, t, 4, 34028234663852886e22, -34028234663852886e22), Pe.write(r, e, t, n, 23, 4), t + 4;\n    }\n    a(Jn, \"writeFloat\");\n    h.prototype.writeFloatLE = a(function(e, t, n) {\n        return Jn(this, e, t, !0, n);\n    }, \"writeFloatLE\");\n    h.prototype.writeFloatBE = a(function(e, t, n) {\n        return Jn(this, e, t, !1, n);\n    }, \"writeFloatBE\");\n    function Xn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Zn(r, e, t, 8, 17976931348623157e292, -17976931348623157e292), Pe.write(r, e, t, n, 52, 8), t + 8;\n    }\n    a(Xn, \"writeDouble\");\n    h.prototype.writeDoubleLE = a(function(e, t, n) {\n        return Xn(this, e, t, !0, n);\n    }, \"writeDoubleLE\");\n    h.prototype.writeDoubleBE = a(function(e, t, n) {\n        return Xn(this, e, t, !1, n);\n    }, \"writeDoubleBE\");\n    h.prototype.copy = a(function(e, t, n, i) {\n        if (!h.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n        if (n || (n = 0), !i && i !== 0 && (i = this.length), t >= e.length && (t = e.length), t || (t = 0), i > 0 && i < n && (i = n), i === n || e.length === 0 || this.length === 0) return 0;\n        if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n        if (n < 0 || n >= this.length) throw new RangeError(\"Index out of range\");\n        if (i < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        i > this.length && (i = this.length), e.length - t < i - n && (i = e.length - t + n);\n        let s = i - n;\n        return this === e && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(t, n, i) : Uint8Array.prototype.set.call(e, this.subarray(n, i), t), s;\n    }, \"copy\");\n    h.prototype.fill = a(function(e, t, n, i) {\n        if (typeof e == \"string\") {\n            if (typeof t == \"string\" ? (i = t, t = 0, n = this.length) : typeof n == \"string\" && (i = n, n = this.length), i !== void 0 && typeof i != \"string\") throw new TypeError(\"encoding must be a string\");\n            if (typeof i == \"string\" && !h.isEncoding(i)) throw new TypeError(\"Unknown encoding: \" + i);\n            if (e.length === 1) {\n                let o = e.charCodeAt(0);\n                (i === \"utf8\" && o < 128 || i === \"latin1\") && (e = o);\n            }\n        } else typeof e == \"number\" ? e = e & 255 : typeof e == \"boolean\" && (e = Number(e));\n        if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n        if (n <= t) return this;\n        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, e || (e = 0);\n        let s;\n        if (typeof e == \"number\") for(s = t; s < n; ++s)this[s] = e;\n        else {\n            let o = h.isBuffer(e) ? e : h.from(e, i), u = o.length;\n            if (u === 0) throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n            for(s = 0; s < n - t; ++s)this[s + t] = o[s % u];\n        }\n        return this;\n    }, \"fill\");\n    var Ie = {};\n    function Ht(r, e, t) {\n        var n;\n        Ie[r] = (n = class extends t {\n            constructor(){\n                super(), Object.defineProperty(this, \"message\", {\n                    value: e.apply(this, arguments),\n                    writable: !0,\n                    configurable: !0\n                }), this.name = `${this.name} [${r}]`, this.stack, delete this.name;\n            }\n            get code() {\n                return r;\n            }\n            set code(s) {\n                Object.defineProperty(this, \"code\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: s,\n                    writable: !0\n                });\n            }\n            toString() {\n                return `${this.name} [${r}\\\n]: ${this.message}`;\n            }\n        }, a(n, \"NodeError\"), n);\n    }\n    a(Ht, \"E\");\n    Ht(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(r) {\n        return r ? `${r} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    Ht(\"ERR_INVALID_ARG_TYPE\", function(r, e) {\n        return `The \"${r}\" argument must be of type number. Received typ\\\ne ${typeof e}`;\n    }, TypeError);\n    Ht(\"ERR_OUT_OF_RANGE\", function(r, e, t) {\n        let n = `The value of \"${r}\" is out o\\\nf range.`, i = t;\n        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? i = Wn(String(t)) : typeof t == \"bigint\" && (i = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (i = Wn(i)), i += \"n\"), n += ` It must be ${e}. Re\\\nceived ${i}`, n;\n    }, RangeError);\n    function Wn(r) {\n        let e = \"\", t = r.length, n = r[0] === \"-\" ? 1 : 0;\n        for(; t >= n + 4; t -= 3)e = `\\\n_${r.slice(t - 3, t)}${e}`;\n        return `${r.slice(0, t)}${e}`;\n    }\n    a(Wn, \"addNumericalSeparator\");\n    function Zo(r, e, t) {\n        Re(e, \"offset\"), (r[e] === void 0 || r[e + t] === void 0) && je(e, r.length - (t + 1));\n    }\n    a(Zo, \"checkBounds\");\n    function ei(r, e, t, n, i, s) {\n        if (r > t || r < e) {\n            let o = typeof e == \"bigint\" ? \"n\" : \"\", u;\n            throw s > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${o} and < 2${o}\\\n ** ${(s + 1) * 8}${o}` : u = `>= -(2${o} ** ${(s + 1) * 8 - 1}${o}) and < 2 ** ${(s + 1) * 8 - 1}${o}` : u = `>= ${e}${o} a\\\nnd <= ${t}${o}`, new Ie.ERR_OUT_OF_RANGE(\"value\", u, r);\n        }\n        Zo(n, i, s);\n    }\n    a(ei, \"checkIntBI\");\n    function Re(r, e) {\n        if (typeof r != \"number\") throw new Ie.ERR_INVALID_ARG_TYPE(e, \"number\", r);\n    }\n    a(Re, \"validateNumber\");\n    function je(r, e, t) {\n        throw Math.floor(r) !== r ? (Re(r, t), new Ie.ERR_OUT_OF_RANGE(t || \"offset\", \"an integer\", r)) : e < 0 ? new Ie.ERR_BUFFER_OUT_OF_BOUNDS : new Ie.ERR_OUT_OF_RANGE(t || \"offset\", `>= ${t ? 1 : 0} and <= ${e}`, r);\n    }\n    a(je, \"boundsError\");\n    var Jo = /[^+/0-9A-Za-z-_]/g;\n    function Xo(r) {\n        if (r = r.split(\"=\")[0], r = r.trim().replace(Jo, \"\"), r.length < 2) return \"\";\n        for(; r.length % 4 !== 0;)r = r + \"=\";\n        return r;\n    }\n    a(Xo, \"base64clean\");\n    function Nt(r, e) {\n        e = e || 1 / 0;\n        let t, n = r.length, i = null, s = [];\n        for(let o = 0; o < n; ++o){\n            if (t = r.charCodeAt(o), t > 55295 && t < 57344) {\n                if (!i) {\n                    if (t > 56319) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    } else if (o + 1 === n) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    }\n                    i = t;\n                    continue;\n                }\n                if (t < 56320) {\n                    (e -= 3) > -1 && s.push(239, 191, 189), i = t;\n                    continue;\n                }\n                t = (i - 55296 << 10 | t - 56320) + 65536;\n            } else i && (e -= 3) > -1 && s.push(239, 191, 189);\n            if (i = null, t < 128) {\n                if ((e -= 1) < 0) break;\n                s.push(t);\n            } else if (t < 2048) {\n                if ((e -= 2) < 0) break;\n                s.push(t >> 6 | 192, t & 63 | 128);\n            } else if (t < 65536) {\n                if ((e -= 3) < 0) break;\n                s.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n            } else if (t < 1114112) {\n                if ((e -= 4) < 0) break;\n                s.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n            } else throw new Error(\"Invalid code point\");\n        }\n        return s;\n    }\n    a(Nt, \"utf8ToBytes\");\n    function ea(r) {\n        let e = [];\n        for(let t = 0; t < r.length; ++t)e.push(r.charCodeAt(t) & 255);\n        return e;\n    }\n    a(ea, \"asciiToBytes\");\n    function ta(r, e) {\n        let t, n, i, s = [];\n        for(let o = 0; o < r.length && !((e -= 2) < 0); ++o)t = r.charCodeAt(o), n = t >> 8, i = t % 256, s.push(i), s.push(n);\n        return s;\n    }\n    a(ta, \"utf16leToBytes\");\n    function ti(r) {\n        return Ot.toByteArray(Xo(r));\n    }\n    a(ti, \"base64ToBytes\");\n    function ft(r, e, t, n) {\n        let i;\n        for(i = 0; i < n && !(i + t >= e.length || i >= r.length); ++i)e[i + t] = r[i];\n        return i;\n    }\n    a(ft, \"blitBuffer\");\n    function ce(r, e) {\n        return r instanceof e || r != null && r.constructor != null && r.constructor.name != null && r.constructor.name === e.name;\n    }\n    a(ce, \"isInstance\");\n    function $t(r) {\n        return r !== r;\n    }\n    a($t, \"numberIsNaN\");\n    var ra = function() {\n        let r = \"0123456789abcdef\", e = new Array(256);\n        for(let t = 0; t < 16; ++t){\n            let n = t * 16;\n            for(let i = 0; i < 16; ++i)e[n + i] = r[t] + r[i];\n        }\n        return e;\n    }();\n    function ye(r) {\n        return typeof BigInt > \"u\" ? na : r;\n    }\n    a(ye, \"defineBigIntMethod\");\n    function na() {\n        throw new Error(\"BigInt not supported\");\n    }\n    a(na, \"BufferBigIntNotDefined\");\n});\nvar w, b, v, d, m, p = z(()=>{\n    \"use strict\";\n    w = globalThis, b = globalThis.setImmediate ?? ((r)=>setTimeout(r, 0)), v = globalThis.clearImmediate ?? ((r)=>clearTimeout(r)), d = typeof globalThis.Buffer == \"function\" && typeof globalThis.Buffer.allocUnsafe == \"function\" ? globalThis.Buffer : ri().Buffer, m = globalThis.process ?? {};\n    m.env ?? (m.env = {});\n    try {\n        m.nextTick(()=>{});\n    } catch  {\n        let e = Promise.resolve();\n        m.nextTick = e.then.bind(e);\n    }\n});\nvar me = I((Pl, Gt)=>{\n    \"use strict\";\n    p();\n    var Le = typeof Reflect == \"object\" ? Reflect : null, ni = Le && typeof Le.apply == \"function\" ? Le.apply : a(function(e, t, n) {\n        return Function.prototype.apply.call(e, t, n);\n    }, \"ReflectApply\"), ht;\n    Le && typeof Le.ownKeys == \"function\" ? ht = Le.ownKeys : Object.getOwnPropertySymbols ? ht = a(function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    }, \"ReflectOwnKeys\") : ht = a(function(e) {\n        return Object.getOwnPropertyNames(e);\n    }, \"ReflectOwnKeys\");\n    function ia(r) {\n        console && console.warn && console.warn(r);\n    }\n    a(ia, \"ProcessEmitWarning\");\n    var si = Number.isNaN || a(function(e) {\n        return e !== e;\n    }, \"NumberIsNaN\");\n    function R() {\n        R.init.call(this);\n    }\n    a(R, \"EventEmitter\");\n    Gt.exports = R;\n    Gt.exports.once = ua;\n    R.EventEmitter = R;\n    R.prototype._events = void 0;\n    R.prototype._eventsCount = 0;\n    R.prototype._maxListeners = void 0;\n    var ii = 10;\n    function pt(r) {\n        if (typeof r != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof r);\n    }\n    a(pt, \"checkListener\");\n    Object.defineProperty(R, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: a(function() {\n            return ii;\n        }, \"get\"),\n        set: a(function(r) {\n            if (typeof r != \"number\" || r < 0 || si(r)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + r + \".\");\n            ii = r;\n        }, \"set\")\n    });\n    R.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    R.prototype.setMaxListeners = a(function(e) {\n        if (typeof e != \"number\" || e < 0 || si(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    }, \"setMaxListeners\");\n    function oi(r) {\n        return r._maxListeners === void 0 ? R.defaultMaxListeners : r._maxListeners;\n    }\n    a(oi, \"_getMaxListeners\");\n    R.prototype.getMaxListeners = a(function() {\n        return oi(this);\n    }, \"getMaxListeners\");\n    R.prototype.emit = a(function(e) {\n        for(var t = [], n = 1; n < arguments.length; n++)t.push(arguments[n]);\n        var i = e === \"error\", s = this._events;\n        if (s !== void 0) i = i && s.error === void 0;\n        else if (!i) return !1;\n        if (i) {\n            var o;\n            if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;\n            var u = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n            throw u.context = o, u;\n        }\n        var c = s[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") ni(c, this, t);\n        else for(var l = c.length, f = fi(c, l), n = 0; n < l; ++n)ni(f[n], this, t);\n        return !0;\n    }, \"emit\");\n    function ai(r, e, t, n) {\n        var i, s, o;\n        if (pt(t), s = r._events, s === void 0 ? (s = r._events = Object.create(null), r._eventsCount = 0) : (s.newListener !== void 0 && (r.emit(\"newListener\", e, t.listener ? t.listener : t), s = r._events), o = s[e]), o === void 0) o = s[e] = t, ++r._eventsCount;\n        else if (typeof o == \"function\" ? o = s[e] = n ? [\n            t,\n            o\n        ] : [\n            o,\n            t\n        ] : n ? o.unshift(t) : o.push(t), i = oi(r), i > 0 && o.length > i && !o.warned) {\n            o.warned = !0;\n            var u = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            u.name = \"MaxListenersExceededWarning\", u.emitter = r, u.type = e, u.count = o.length, ia(u);\n        }\n        return r;\n    }\n    a(ai, \"_addListener\");\n    R.prototype.addListener = a(function(e, t) {\n        return ai(this, e, t, !1);\n    }, \"addListener\");\n    R.prototype.on = R.prototype.addListener;\n    R.prototype.prependListener = a(function(e, t) {\n        return ai(this, e, t, !0);\n    }, \"prependListener\");\n    function sa() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    a(sa, \"onceWrapper\");\n    function ui(r, e, t) {\n        var n = {\n            fired: !1,\n            wrapFn: void 0,\n            target: r,\n            type: e,\n            listener: t\n        }, i = sa.bind(n);\n        return i.listener = t, n.wrapFn = i, i;\n    }\n    a(ui, \"_onceWrap\");\n    R.prototype.once = a(function(e, t) {\n        return pt(t), this.on(e, ui(this, e, t)), this;\n    }, \"once\");\n    R.prototype.prependOnceListener = a(function(e, t) {\n        return pt(t), this.prependListener(e, ui(this, e, t)), this;\n    }, \"prependOnceListener\");\n    R.prototype.removeListener = a(function(e, t) {\n        var n, i, s, o, u;\n        if (pt(t), i = this._events, i === void 0) return this;\n        if (n = i[e], n === void 0) return this;\n        if (n === t || n.listener === t) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n        else if (typeof n != \"function\") {\n            for(s = -1, o = n.length - 1; o >= 0; o--)if (n[o] === t || n[o].listener === t) {\n                u = n[o].listener, s = o;\n                break;\n            }\n            if (s < 0) return this;\n            s === 0 ? n.shift() : oa(n, s), n.length === 1 && (i[e] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", e, u || t);\n        }\n        return this;\n    }, \"removeListener\");\n    R.prototype.off = R.prototype.removeListener;\n    R.prototype.removeAllListeners = a(function(e) {\n        var t, n, i;\n        if (n = this._events, n === void 0) return this;\n        if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[e]), this;\n        if (arguments.length === 0) {\n            var s = Object.keys(n), o;\n            for(i = 0; i < s.length; ++i)o = s[i], o !== \"removeListener\" && this.removeAllListeners(o);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (t = n[e], typeof t == \"function\") this.removeListener(e, t);\n        else if (t !== void 0) for(i = t.length - 1; i >= 0; i--)this.removeListener(e, t[i]);\n        return this;\n    }, \"removeAllListeners\");\n    function ci(r, e, t) {\n        var n = r._events;\n        if (n === void 0) return [];\n        var i = n[e];\n        return i === void 0 ? [] : typeof i == \"function\" ? t ? [\n            i.listener || i\n        ] : [\n            i\n        ] : t ? aa(i) : fi(i, i.length);\n    }\n    a(ci, \"_listeners\");\n    R.prototype.listeners = a(function(e) {\n        return ci(this, e, !0);\n    }, \"listeners\");\n    R.prototype.rawListeners = a(function(e) {\n        return ci(this, e, !1);\n    }, \"rawListeners\");\n    R.listenerCount = function(r, e) {\n        return typeof r.listenerCount == \"function\" ? r.listenerCount(e) : li.call(r, e);\n    };\n    R.prototype.listenerCount = li;\n    function li(r) {\n        var e = this._events;\n        if (e !== void 0) {\n            var t = e[r];\n            if (typeof t == \"function\") return 1;\n            if (t !== void 0) return t.length;\n        }\n        return 0;\n    }\n    a(li, \"listenerCount\");\n    R.prototype.eventNames = a(function() {\n        return this._eventsCount > 0 ? ht(this._events) : [];\n    }, \"eventNames\");\n    function fi(r, e) {\n        for(var t = new Array(e), n = 0; n < e; ++n)t[n] = r[n];\n        return t;\n    }\n    a(fi, \"arrayClone\");\n    function oa(r, e) {\n        for(; e + 1 < r.length; e++)r[e] = r[e + 1];\n        r.pop();\n    }\n    a(oa, \"spliceOne\");\n    function aa(r) {\n        for(var e = new Array(r.length), t = 0; t < e.length; ++t)e[t] = r[t].listener || r[t];\n        return e;\n    }\n    a(aa, \"unwrapListeners\");\n    function ua(r, e) {\n        return new Promise(function(t, n) {\n            function i(o) {\n                r.removeListener(e, s), n(o);\n            }\n            a(i, \"errorListener\");\n            function s() {\n                typeof r.removeListener == \"function\" && r.removeListener(\"error\", i), t([].slice.call(arguments));\n            }\n            a(s, \"resolver\"), hi(r, e, s, {\n                once: !0\n            }), e !== \"error\" && ca(r, i, {\n                once: !0\n            });\n        });\n    }\n    a(ua, \"once\");\n    function ca(r, e, t) {\n        typeof r.on == \"function\" && hi(r, \"error\", e, t);\n    }\n    a(ca, \"addErrorHandlerIfEventEmitter\");\n    function hi(r, e, t, n) {\n        if (typeof r.on == \"function\") n.once ? r.once(e, t) : r.on(e, t);\n        else if (typeof r.addEventListener == \"function\") r.addEventListener(e, a(function i(s) {\n            n.once && r.removeEventListener(e, i), t(s);\n        }, \"wrapListener\"));\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof r);\n    }\n    a(hi, \"eventTargetAgnosticAddListener\");\n});\nvar yi = {};\nne(yi, {\n    Socket: ()=>ge,\n    isIP: ()=>la\n});\nfunction la(r) {\n    return 0;\n}\nvar di, pi, S, ge, We = z(()=>{\n    \"use s\\\ntrict\";\n    p();\n    di = xe(me(), 1);\n    a(la, \"isIP\");\n    pi = /^[^.]+\\./, S = class S extends di.EventEmitter {\n        constructor(){\n            super(...arguments);\n            E(this, \"opts\", {});\n            E(this, \"connecting\", !1);\n            E(this, \"pending\", !0);\n            E(this, \"writable\", !0);\n            E(this, \"encrypted\", !1);\n            E(this, \"authorized\", !1);\n            E(this, \"destroyed\", !1);\n            E(this, \"ws\", null);\n            E(this, \"writeBuffer\");\n            E(this, \"tlsState\", 0);\n            E(this, \"tlsRead\");\n            E(this, \"tlsWrite\");\n        }\n        static get poolQueryViaFetch() {\n            return S.opts.poolQueryViaFetch ?? S.defaults.poolQueryViaFetch;\n        }\n        static set poolQueryViaFetch(t) {\n            S.opts.poolQueryViaFetch = t;\n        }\n        static get fetchEndpoint() {\n            return S.opts.fetchEndpoint ?? S.defaults.fetchEndpoint;\n        }\n        static set fetchEndpoint(t) {\n            S.opts.fetchEndpoint = t;\n        }\n        static get fetchConnectionCache() {\n            return !0;\n        }\n        static set fetchConnectionCache(t) {\n            console.warn(\"The `fetchConnectionCache` option is deprecated (now always `true`)\");\n        }\n        static get fetchFunction() {\n            return S.opts.fetchFunction ?? S.defaults.fetchFunction;\n        }\n        static set fetchFunction(t) {\n            S.opts.fetchFunction = t;\n        }\n        static get webSocketConstructor() {\n            return S.opts.webSocketConstructor ?? S.defaults.webSocketConstructor;\n        }\n        static set webSocketConstructor(t) {\n            S.opts.webSocketConstructor = t;\n        }\n        get webSocketConstructor() {\n            return this.opts.webSocketConstructor ?? S.webSocketConstructor;\n        }\n        set webSocketConstructor(t) {\n            this.opts.webSocketConstructor = t;\n        }\n        static get wsProxy() {\n            return S.opts.wsProxy ?? S.defaults.wsProxy;\n        }\n        static set wsProxy(t) {\n            S.opts.wsProxy = t;\n        }\n        get wsProxy() {\n            return this.opts.wsProxy ?? S.wsProxy;\n        }\n        set wsProxy(t) {\n            this.opts.wsProxy = t;\n        }\n        static get coalesceWrites() {\n            return S.opts.coalesceWrites ?? S.defaults.coalesceWrites;\n        }\n        static set coalesceWrites(t) {\n            S.opts.coalesceWrites = t;\n        }\n        get coalesceWrites() {\n            return this.opts.coalesceWrites ?? S.coalesceWrites;\n        }\n        set coalesceWrites(t) {\n            this.opts.coalesceWrites = t;\n        }\n        static get useSecureWebSocket() {\n            return S.opts.useSecureWebSocket ?? S.defaults.useSecureWebSocket;\n        }\n        static set useSecureWebSocket(t) {\n            S.opts.useSecureWebSocket = t;\n        }\n        get useSecureWebSocket() {\n            return this.opts.useSecureWebSocket ?? S.useSecureWebSocket;\n        }\n        set useSecureWebSocket(t) {\n            this.opts.useSecureWebSocket = t;\n        }\n        static get forceDisablePgSSL() {\n            return S.opts.forceDisablePgSSL ?? S.defaults.forceDisablePgSSL;\n        }\n        static set forceDisablePgSSL(t) {\n            S.opts.forceDisablePgSSL = t;\n        }\n        get forceDisablePgSSL() {\n            return this.opts.forceDisablePgSSL ?? S.forceDisablePgSSL;\n        }\n        set forceDisablePgSSL(t) {\n            this.opts.forceDisablePgSSL = t;\n        }\n        static get disableSNI() {\n            return S.opts.disableSNI ?? S.defaults.disableSNI;\n        }\n        static set disableSNI(t) {\n            S.opts.disableSNI = t;\n        }\n        get disableSNI() {\n            return this.opts.disableSNI ?? S.disableSNI;\n        }\n        set disableSNI(t) {\n            this.opts.disableSNI = t;\n        }\n        static get pipelineConnect() {\n            return S.opts.pipelineConnect ?? S.defaults.pipelineConnect;\n        }\n        static set pipelineConnect(t) {\n            S.opts.pipelineConnect = t;\n        }\n        get pipelineConnect() {\n            return this.opts.pipelineConnect ?? S.pipelineConnect;\n        }\n        set pipelineConnect(t) {\n            this.opts.pipelineConnect = t;\n        }\n        static get subtls() {\n            return S.opts.subtls ?? S.defaults.subtls;\n        }\n        static set subtls(t) {\n            S.opts.subtls = t;\n        }\n        get subtls() {\n            return this.opts.subtls ?? S.subtls;\n        }\n        set subtls(t) {\n            this.opts.subtls = t;\n        }\n        static get pipelineTLS() {\n            return S.opts.pipelineTLS ?? S.defaults.pipelineTLS;\n        }\n        static set pipelineTLS(t) {\n            S.opts.pipelineTLS = t;\n        }\n        get pipelineTLS() {\n            return this.opts.pipelineTLS ?? S.pipelineTLS;\n        }\n        set pipelineTLS(t) {\n            this.opts.pipelineTLS = t;\n        }\n        static get rootCerts() {\n            return S.opts.rootCerts ?? S.defaults.rootCerts;\n        }\n        static set rootCerts(t) {\n            S.opts.rootCerts = t;\n        }\n        get rootCerts() {\n            return this.opts.rootCerts ?? S.rootCerts;\n        }\n        set rootCerts(t) {\n            this.opts.rootCerts = t;\n        }\n        wsProxyAddrForHost(t, n) {\n            let i = this.wsProxy;\n            if (i === void 0) throw new Error(\"No WebSocket proxy is configured. Please see https://github.com/neondatabase/serverless/blob/main/CONFIG.md#wsproxy-string--host-string-port-number--string--string\");\n            return typeof i == \"function\" ? i(t, n) : `${i}?address=${t}:${n}`;\n        }\n        setNoDelay() {\n            return this;\n        }\n        setKeepAlive() {\n            return this;\n        }\n        ref() {\n            return this;\n        }\n        unref() {\n            return this;\n        }\n        connect(t, n, i) {\n            this.connecting = !0, i && this.once(\"connect\", i);\n            let s = a(()=>{\n                this.connecting = !1, this.pending = !1, this.emit(\"connect\"), this.emit(\"ready\");\n            }, \"handleWebSocketOpen\"), o = a((c, l = !1)=>{\n                c.binaryType = \"arraybuffer\", c.addEventListener(\"error\", (f)=>{\n                    this.emit(\"error\", f), this.emit(\"close\");\n                }), c.addEventListener(\"message\", (f)=>{\n                    if (this.tlsState === 0) {\n                        let y = d.from(f.data);\n                        this.emit(\"data\", y);\n                    }\n                }), c.addEventListener(\"close\", ()=>{\n                    this.emit(\"close\");\n                }), l ? s() : c.addEventListener(\"open\", s);\n            }, \"configureWebSocket\"), u;\n            try {\n                u = this.wsProxyAddrForHost(n, typeof t == \"string\" ? parseInt(t, 10) : t);\n            } catch (c) {\n                this.emit(\"error\", c), this.emit(\"close\");\n                return;\n            }\n            try {\n                let l = (this.useSecureWebSocket ? \"wss:\" : \"ws:\") + \"//\" + u;\n                if (this.webSocketConstructor !== void 0) this.ws = new this.webSocketConstructor(l), o(this.ws);\n                else try {\n                    this.ws = new WebSocket(l), o(this.ws);\n                } catch  {\n                    this.ws = new __unstable_WebSocket(l), o(this.ws);\n                }\n            } catch (c) {\n                let f = (this.useSecureWebSocket ? \"https:\" : \"http:\") + \"//\" + u;\n                fetch(f, {\n                    headers: {\n                        Upgrade: \"websocket\"\n                    }\n                }).then((y)=>{\n                    if (this.ws = y.webSocket, this.ws == null) throw c;\n                    this.ws.accept(), o(this.ws, !0);\n                }).catch((y)=>{\n                    this.emit(\"error\", new Error(`All attempts to open a WebSocket to connect to the database failed. Please refer \\\nto https://github.com/neondatabase/serverless/blob/main/CONFIG.md#websocketconstructor-typeof-websoc\\\nket--undefined. Details: ${y}`)), this.emit(\"close\");\n                });\n            }\n        }\n        async startTls(t) {\n            if (this.subtls === void 0) throw new Error(\"For Postgres SSL connections, you must set `neonConfig.subtls` to the subtls library. See https://github.com/neondatabase/serverless/blob/main/CONFIG.md for more information.\");\n            this.tlsState = 1;\n            let n = await this.subtls.TrustedCert.databaseFromPEM(this.rootCerts), i = new this.subtls.WebSocketReadQueue(this.ws), s = i.read.bind(i), o = this.rawWrite.bind(this), { read: u, write: c } = await this.subtls.startTls(t, n, s, o, {\n                useSNI: !this.disableSNI,\n                expectPreData: this.pipelineTLS ? new Uint8Array([\n                    83\n                ]) : void 0\n            });\n            this.tlsRead = u, this.tlsWrite = c, this.tlsState = 2, this.encrypted = !0, this.authorized = !0, this.emit(\"secureConnection\", this), this.tlsReadLoop();\n        }\n        async tlsReadLoop() {\n            for(;;){\n                let t = await this.tlsRead();\n                if (t === void 0) break;\n                {\n                    let n = d.from(t);\n                    this.emit(\"data\", n);\n                }\n            }\n        }\n        rawWrite(t) {\n            if (!this.coalesceWrites) {\n                this.ws.send(t);\n                return;\n            }\n            if (this.writeBuffer === void 0) this.writeBuffer = t, setTimeout(()=>{\n                this.ws.send(this.writeBuffer), this.writeBuffer = void 0;\n            }, 0);\n            else {\n                let n = new Uint8Array(this.writeBuffer.length + t.length);\n                n.set(this.writeBuffer), n.set(t, this.writeBuffer.length), this.writeBuffer = n;\n            }\n        }\n        write(t, n = \"utf8\", i = (s)=>{}) {\n            return t.length === 0 ? (i(), !0) : (typeof t == \"string\" && (t = d.from(t, n)), this.tlsState === 0 ? (this.rawWrite(t), i()) : this.tlsState === 1 ? this.once(\"secureConnection\", ()=>{\n                this.write(t, n, i);\n            }) : (this.tlsWrite(t), i()), !0);\n        }\n        end(t = d.alloc(0), n = \"utf8\", i = ()=>{}) {\n            return this.write(t, n, ()=>{\n                this.ws.close(), i();\n            }), this;\n        }\n        destroy() {\n            return this.destroyed = !0, this.end();\n        }\n    };\n    a(S, \"Socket\"), E(S, \"defaults\", {\n        poolQueryViaFetch: !1,\n        fetchEndpoint: a((t, n, i)=>{\n            let s;\n            return i?.jwtAuth ? s = t.replace(pi, \"apiauth.\") : s = t.replace(pi, \"api.\"), \"https://\" + s + \"/sql\";\n        }, \"fetchEndpoint\"),\n        fetchConnectionCache: !0,\n        fetchFunction: void 0,\n        webSocketConstructor: void 0,\n        wsProxy: a((t)=>t + \"/v2\", \"wsProxy\"),\n        useSecureWebSocket: !0,\n        forceDisablePgSSL: !0,\n        coalesceWrites: !0,\n        pipelineConnect: \"password\",\n        subtls: void 0,\n        rootCerts: \"\",\n        pipelineTLS: !1,\n        disableSNI: !1\n    }), E(S, \"opts\", {});\n    ge = S;\n});\nvar mi = {};\nne(mi, {\n    parse: ()=>Vt\n});\nfunction Vt(r, e = !1) {\n    let { protocol: t } = new URL(r), n = \"http:\" + r.substring(t.length), { username: i, password: s, host: o, hostname: u, port: c, pathname: l, search: f, searchParams: y, hash: g } = new URL(n);\n    s = decodeURIComponent(s), i = decodeURIComponent(i), l = decodeURIComponent(l);\n    let A = i + \":\" + s, C = e ? Object.fromEntries(y.entries()) : f;\n    return {\n        href: r,\n        protocol: t,\n        auth: A,\n        username: i,\n        password: s,\n        host: o,\n        hostname: u,\n        port: c,\n        pathname: l,\n        search: f,\n        query: C,\n        hash: g\n    };\n}\nvar zt = z(()=>{\n    \"use strict\";\n    p();\n    a(Vt, \"parse\");\n});\nvar Jt = I((Si)=>{\n    \"use strict\";\n    p();\n    Si.parse = function(r, e) {\n        return new Zt(r, e).parse();\n    };\n    var wt = class wt {\n        constructor(e, t){\n            this.source = e, this.transform = t || Ea, this.position = 0, this.entries = [], this.recorded = [], this.dimension = 0;\n        }\n        isEof() {\n            return this.position >= this.source.length;\n        }\n        nextCharacter() {\n            var e = this.source[this.position++];\n            return e === \"\\\\\" ? {\n                value: this.source[this.position++],\n                escaped: !0\n            } : {\n                value: e,\n                escaped: !1\n            };\n        }\n        record(e) {\n            this.recorded.push(e);\n        }\n        newEntry(e) {\n            var t;\n            (this.recorded.length > 0 || e) && (t = this.recorded.join(\"\"), t === \"NULL\" && !e && (t = null), t !== null && (t = this.transform(t)), this.entries.push(t), this.recorded = []);\n        }\n        consumeDimensions() {\n            if (this.source[0] === \"[\") for(; !this.isEof();){\n                var e = this.nextCharacter();\n                if (e.value === \"=\") break;\n            }\n        }\n        parse(e) {\n            var t, n, i;\n            for(this.consumeDimensions(); !this.isEof();)if (t = this.nextCharacter(), t.value === \"{\" && !i) this.dimension++, this.dimension > 1 && (n = new wt(this.source.substr(this.position - 1), this.transform), this.entries.push(n.parse(!0)), this.position += n.position - 2);\n            else if (t.value === \"}\" && !i) {\n                if (this.dimension--, !this.dimension && (this.newEntry(), e)) return this.entries;\n            } else t.value === '\"' && !t.escaped ? (i && this.newEntry(!0), i = !i) : t.value === \",\" && !i ? this.newEntry() : this.record(t.value);\n            if (this.dimension !== 0) throw new Error(\"array dimension not balanced\");\n            return this.entries;\n        }\n    };\n    a(wt, \"ArrayParser\");\n    var Zt = wt;\n    function Ea(r) {\n        return r;\n    }\n    a(Ea, \"identity\");\n});\nvar Xt = I((Gl, Ei)=>{\n    p();\n    var Aa = Jt();\n    Ei.exports = {\n        create: a(function(r, e) {\n            return {\n                parse: a(function() {\n                    return Aa.parse(r, e);\n                }, \"parse\")\n            };\n        }, \"create\")\n    };\n});\nvar _i = I((Kl, Ci)=>{\n    \"use strict\";\n    p();\n    var Ca = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/, _a = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/, Ta = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/, Ia = /^-?infinity$/;\n    Ci.exports = a(function(e) {\n        if (Ia.test(e)) return Number(e.replace(\"i\", \"I\"));\n        var t = Ca.exec(e);\n        if (!t) return Pa(e) || null;\n        var n = !!t[8], i = parseInt(t[1], 10);\n        n && (i = Ai(i));\n        var s = parseInt(t[2], 10) - 1, o = t[3], u = parseInt(t[4], 10), c = parseInt(t[5], 10), l = parseInt(t[6], 10), f = t[7];\n        f = f ? 1e3 * parseFloat(f) : 0;\n        var y, g = Ra(e);\n        return g != null ? (y = new Date(Date.UTC(i, s, o, u, c, l, f)), er(i) && y.setUTCFullYear(i), g !== 0 && y.setTime(y.getTime() - g)) : (y = new Date(i, s, o, u, c, l, f), er(i) && y.setFullYear(i)), y;\n    }, \"parseDate\");\n    function Pa(r) {\n        var e = _a.exec(r);\n        if (e) {\n            var t = parseInt(e[1], 10), n = !!e[4];\n            n && (t = Ai(t));\n            var i = parseInt(e[2], 10) - 1, s = e[3], o = new Date(t, i, s);\n            return er(t) && o.setFullYear(t), o;\n        }\n    }\n    a(Pa, \"getDate\");\n    function Ra(r) {\n        if (r.endsWith(\"+00\")) return 0;\n        var e = Ta.exec(r.split(\" \")[1]);\n        if (e) {\n            var t = e[1];\n            if (t === \"Z\") return 0;\n            var n = t === \"-\" ? -1 : 1, i = parseInt(e[2], 10) * 3600 + parseInt(e[3] || 0, 10) * 60 + parseInt(e[4] || 0, 10);\n            return i * n * 1e3;\n        }\n    }\n    a(Ra, \"timeZoneOffset\");\n    function Ai(r) {\n        return -(r - 1);\n    }\n    a(Ai, \"bcYearToNegativeYear\");\n    function er(r) {\n        return r >= 0 && r < 100;\n    }\n    a(er, \"is0To99\");\n});\nvar Ii = I((Jl, Ti)=>{\n    p();\n    Ti.exports = La;\n    var Ba = Object.prototype.hasOwnProperty;\n    function La(r) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var n in t)Ba.call(t, n) && (r[n] = t[n]);\n        }\n        return r;\n    }\n    a(La, \"extend\");\n});\nvar Bi = I((tf, Ri)=>{\n    \"use strict\";\n    p();\n    var Fa = Ii();\n    Ri.exports = Fe;\n    function Fe(r) {\n        if (!(this instanceof Fe)) return new Fe(r);\n        Fa(this, $a(r));\n    }\n    a(Fe, \"PostgresInterval\");\n    var ka = [\n        \"seconds\",\n        \"minutes\",\n        \"hours\",\n        \"days\",\n        \"months\",\n        \"years\"\n    ];\n    Fe.prototype.toPostgres = function() {\n        var r = ka.filter(this.hasOwnProperty, this);\n        return this.milliseconds && r.indexOf(\"seconds\") < 0 && r.push(\"seconds\"), r.length === 0 ? \"0\" : r.map(function(e) {\n            var t = this[e] || 0;\n            return e === \"seconds\" && this.milliseconds && (t = (t + this.milliseconds / 1e3).toFixed(6).replace(/\\.?0+$/, \"\")), t + \" \" + e;\n        }, this).join(\" \");\n    };\n    var Ma = {\n        years: \"Y\",\n        months: \"M\",\n        days: \"D\",\n        hours: \"H\",\n        minutes: \"M\",\n        seconds: \"S\"\n    }, Ua = [\n        \"years\",\n        \"months\",\n        \"days\"\n    ], Da = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\"\n    ];\n    Fe.prototype.toISOString = Fe.prototype.toISO = function() {\n        var r = Ua.map(t, this).join(\"\"), e = Da.map(t, this).join(\"\");\n        return \"P\" + r + \"T\" + e;\n        function t(n) {\n            var i = this[n] || 0;\n            return n === \"seconds\" && this.milliseconds && (i = (i + this.milliseconds / 1e3).toFixed(6).replace(/0+$/, \"\")), i + Ma[n];\n        }\n    };\n    var tr = \"([+-]?\\\\d+)\", Oa = tr + \"\\\\s+years?\", qa = tr + \"\\\\s+mons?\", Qa = tr + \"\\\\s+days?\", Na = \"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\", ja = new RegExp([\n        Oa,\n        qa,\n        Qa,\n        Na\n    ].map(function(r) {\n        return \"(\" + r + \")?\";\n    }).join(\"\\\\s*\")), Pi = {\n        years: 2,\n        months: 4,\n        days: 6,\n        hours: 9,\n        minutes: 10,\n        seconds: 11,\n        milliseconds: 12\n    }, Wa = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\"\n    ];\n    function Ha(r) {\n        var e = r + \"000000\".slice(r.length);\n        return parseInt(e, 10) / 1e3;\n    }\n    a(Ha, \"parseMilliseconds\");\n    function $a(r) {\n        if (!r) return {};\n        var e = ja.exec(r), t = e[8] === \"-\";\n        return Object.keys(Pi).reduce(function(n, i) {\n            var s = Pi[i], o = e[s];\n            return !o || (o = i === \"milliseconds\" ? Ha(o) : parseInt(o, 10), !o) || (t && ~Wa.indexOf(i) && (o *= -1), n[i] = o), n;\n        }, {});\n    }\n    a($a, \"parse\");\n});\nvar Fi = I((sf, Li)=>{\n    \"use strict\";\n    p();\n    Li.exports = a(function(e) {\n        if (/^\\\\x/.test(e)) return new d(e.substr(2), \"hex\");\n        for(var t = \"\", n = 0; n < e.length;)if (e[n] !== \"\\\\\") t += e[n], ++n;\n        else if (/[0-7]{3}/.test(e.substr(n + 1, 3))) t += String.fromCharCode(parseInt(e.substr(n + 1, 3), 8)), n += 4;\n        else {\n            for(var i = 1; n + i < e.length && e[n + i] === \"\\\\\";)i++;\n            for(var s = 0; s < Math.floor(i / 2); ++s)t += \"\\\\\";\n            n += Math.floor(i / 2) * 2;\n        }\n        return new d(t, \"binary\");\n    }, \"parseBytea\");\n});\nvar Qi = I((uf, qi)=>{\n    p();\n    var Ve = Jt(), ze = Xt(), bt = _i(), Mi = Bi(), Ui = Fi();\n    function vt(r) {\n        return a(function(t) {\n            return t === null ? t : r(t);\n        }, \"nullAllowed\");\n    }\n    a(vt, \"allowNull\");\n    function Di(r) {\n        return r === null ? r : r === \"TRUE\" || r === \"t\" || r === \"true\" || r === \"y\" || r === \"yes\" || r === \"on\" || r === \"1\";\n    }\n    a(Di, \"parseBool\");\n    function Ga(r) {\n        return r ? Ve.parse(r, Di) : null;\n    }\n    a(Ga, \"parseBoolArray\");\n    function Va(r) {\n        return parseInt(r, 10);\n    }\n    a(Va, \"parseBaseTenInt\");\n    function rr(r) {\n        return r ? Ve.parse(r, vt(Va)) : null;\n    }\n    a(rr, \"parseIntegerArray\");\n    function za(r) {\n        return r ? Ve.parse(r, vt(function(e) {\n            return Oi(e).trim();\n        })) : null;\n    }\n    a(za, \"parseBigIntegerArray\");\n    var Ka = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = or(t)), t;\n        });\n        return e.parse();\n    }, \"parsePointArray\"), nr = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = parseFloat(t)), t;\n        });\n        return e.parse();\n    }, \"parseFloatArray\"), te = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r);\n        return e.parse();\n    }, \"parseStringArray\"), ir = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = bt(t)), t;\n        });\n        return e.parse();\n    }, \"parseDateArray\"), Ya = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = Mi(t)), t;\n        });\n        return e.parse();\n    }, \"parseIntervalArray\"), Za = a(function(r) {\n        return r ? Ve.parse(r, vt(Ui)) : null;\n    }, \"parseByteAArray\"), sr = a(function(r) {\n        return parseInt(r, 10);\n    }, \"parseInteger\"), Oi = a(function(r) {\n        var e = String(r);\n        return /^\\d+$/.test(e) ? e : r;\n    }, \"parseBigInteger\"), ki = a(function(r) {\n        return r ? Ve.parse(r, vt(JSON.parse)) : null;\n    }, \"parseJsonArray\"), or = a(function(r) {\n        return r[0] !== \"(\" ? null : (r = r.substring(1, r.length - 1).split(\",\"), {\n            x: parseFloat(r[0]),\n            y: parseFloat(r[1])\n        });\n    }, \"parsePoint\"), Ja = a(function(r) {\n        if (r[0] !== \"<\" && r[1] !== \"(\") return null;\n        for(var e = \"(\", t = \"\", n = !1, i = 2; i < r.length - 1; i++){\n            if (n || (e += r[i]), r[i] === \")\") {\n                n = !0;\n                continue;\n            } else if (!n) continue;\n            r[i] !== \",\" && (t += r[i]);\n        }\n        var s = or(e);\n        return s.radius = parseFloat(t), s;\n    }, \"parseCircle\"), Xa = a(function(r) {\n        r(20, Oi), r(21, sr), r(23, sr), r(26, sr), r(700, parseFloat), r(701, parseFloat), r(16, Di), r(1082, bt), r(1114, bt), r(1184, bt), r(600, or), r(651, te), r(718, Ja), r(1e3, Ga), r(1001, Za), r(1005, rr), r(1007, rr), r(1028, rr), r(1016, za), r(1017, Ka), r(1021, nr), r(1022, nr), r(1231, nr), r(1014, te), r(1015, te), r(1008, te), r(1009, te), r(1040, te), r(1041, te), r(1115, ir), r(1182, ir), r(1185, ir), r(1186, Mi), r(1187, Ya), r(17, Ui), r(114, JSON.parse.bind(JSON)), r(3802, JSON.parse.bind(JSON)), r(199, ki), r(3807, ki), r(3907, te), r(2951, te), r(791, te), r(1183, te), r(1270, te);\n    }, \"init\");\n    qi.exports = {\n        init: Xa\n    };\n});\nvar ji = I((ff, Ni)=>{\n    \"use strict\";\n    p();\n    var Y = 1e6;\n    function eu(r) {\n        var e = r.readInt32BE(0), t = r.readUInt32BE(4), n = \"\";\n        e < 0 && (e = ~e + (t === 0), t = ~t + 1 >>> 0, n = \"-\");\n        var i = \"\", s, o, u, c, l, f;\n        {\n            if (s = e % Y, e = e / Y >>> 0, o = 4294967296 * s + t, t = o / Y >>> 0, u = \"\" + (o - Y * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", l = 6 - u.length, f = 0; f < l; f++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Y, e = e / Y >>> 0, o = 4294967296 * s + t, t = o / Y >>> 0, u = \"\" + (o - Y * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", l = 6 - u.length, f = 0; f < l; f++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Y, e = e / Y >>> 0, o = 4294967296 * s + t, t = o / Y >>> 0, u = \"\" + (o - Y * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", l = 6 - u.length, f = 0; f < l; f++)c += \"0\";\n            i = c + u + i;\n        }\n        return s = e % Y, o = 4294967296 * s + t, u = \"\" + o % Y, n + u + i;\n    }\n    a(eu, \"readInt8\");\n    Ni.exports = eu;\n});\nvar Vi = I((df, Gi)=>{\n    p();\n    var tu = ji(), F = a(function(r, e, t, n, i) {\n        t = t || 0, n = n || !1, i = i || function(A, C, Q) {\n            return A * Math.pow(2, Q) + C;\n        };\n        var s = t >> 3, o = a(function(A) {\n            return n ? ~A & 255 : A;\n        }, \"inv\"), u = 255, c = 8 - t % 8;\n        e < c && (u = 255 << 8 - e & 255, c = e), t && (u = u >> t % 8);\n        var l = 0;\n        t % 8 + e >= 8 && (l = i(0, o(r[s]) & u, c));\n        for(var f = e + t >> 3, y = s + 1; y < f; y++)l = i(l, o(r[y]), 8);\n        var g = (e + t) % 8;\n        return g > 0 && (l = i(l, o(r[f]) >> 8 - g, g)), l;\n    }, \"parseBits\"), $i = a(function(r, e, t) {\n        var n = Math.pow(2, t - 1) - 1, i = F(r, 1), s = F(r, t, 1);\n        if (s === 0) return 0;\n        var o = 1, u = a(function(l, f, y) {\n            l === 0 && (l = 1);\n            for(var g = 1; g <= y; g++)o /= 2, (f & 1 << y - g) > 0 && (l += o);\n            return l;\n        }, \"parsePrecisionBits\"), c = F(r, e, t + 1, !1, u);\n        return s == Math.pow(2, t + 1) - 1 ? c === 0 ? i === 0 ? 1 / 0 : -1 / 0 : NaN : (i === 0 ? 1 : -1) * Math.pow(2, s - n) * c;\n    }, \"parseFloatFromBits\"), ru = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 15, 1, !0) + 1) : F(r, 15, 1);\n    }, \"parseInt16\"), Wi = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 31, 1, !0) + 1) : F(r, 31, 1);\n    }, \"parseInt32\"), nu = a(function(r) {\n        return $i(r, 23, 8);\n    }, \"parseFloat32\"), iu = a(function(r) {\n        return $i(r, 52, 11);\n    }, \"parseFloat64\"), su = a(function(r) {\n        var e = F(r, 16, 32);\n        if (e == 49152) return NaN;\n        for(var t = Math.pow(1e4, F(r, 16, 16)), n = 0, i = [], s = F(r, 16), o = 0; o < s; o++)n += F(r, 16, 64 + 16 * o) * t, t /= 1e4;\n        var u = Math.pow(10, F(r, 16, 48));\n        return (e === 0 ? 1 : -1) * Math.round(n * u) / u;\n    }, \"parseNumeric\"), Hi = a(function(r, e) {\n        var t = F(e, 1), n = F(e, 63, 1), i = new Date((t === 0 ? 1 : -1) * n / 1e3 + 9466848e5);\n        return r || i.setTime(i.getTime() + i.getTimezoneOffset() * 6e4), i.usec = n % 1e3, i.getMicroSeconds = function() {\n            return this.usec;\n        }, i.setMicroSeconds = function(s) {\n            this.usec = s;\n        }, i.getUTCMicroSeconds = function() {\n            return this.usec;\n        }, i;\n    }, \"parseDate\"), Ke = a(function(r) {\n        for(var e = F(r, 32), t = F(r, 32, 32), n = F(r, 32, 64), i = 96, s = [], o = 0; o < e; o++)s[o] = F(r, 32, i), i += 32, i += 32;\n        var u = a(function(l) {\n            var f = F(r, 32, i);\n            if (i += 32, f == 4294967295) return null;\n            var y;\n            if (l == 23 || l == 20) return y = F(r, f * 8, i), i += f * 8, y;\n            if (l == 25) return y = r.toString(this.encoding, i >> 3, (i += f << 3) >> 3), y;\n            console.log(\"ERROR: ElementType not implemented: \" + l);\n        }, \"parseElement\"), c = a(function(l, f) {\n            var y = [], g;\n            if (l.length > 1) {\n                var A = l.shift();\n                for(g = 0; g < A; g++)y[g] = c(l, f);\n                l.unshift(A);\n            } else for(g = 0; g < l[0]; g++)y[g] = u(f);\n            return y;\n        }, \"parse\");\n        return c(s, n);\n    }, \"parseArray\"), ou = a(function(r) {\n        return r.toString(\"utf8\");\n    }, \"parseText\"), au = a(function(r) {\n        return r === null ? null : F(r, 8) > 0;\n    }, \"parseBool\"), uu = a(function(r) {\n        r(20, tu), r(21, ru), r(23, Wi), r(26, Wi), r(1700, su), r(700, nu), r(701, iu), r(16, au), r(1114, Hi.bind(null, !1)), r(1184, Hi.bind(null, !0)), r(1e3, Ke), r(1007, Ke), r(1016, Ke), r(1008, Ke), r(1009, Ke), r(25, ou);\n    }, \"init\");\n    Gi.exports = {\n        init: uu\n    };\n});\nvar Ki = I((gf, zi)=>{\n    p();\n    zi.exports = {\n        BOOL: 16,\n        BYTEA: 17,\n        CHAR: 18,\n        INT8: 20,\n        INT2: 21,\n        INT4: 23,\n        REGPROC: 24,\n        TEXT: 25,\n        OID: 26,\n        TID: 27,\n        XID: 28,\n        CID: 29,\n        JSON: 114,\n        XML: 142,\n        PG_NODE_TREE: 194,\n        SMGR: 210,\n        PATH: 602,\n        POLYGON: 604,\n        CIDR: 650,\n        FLOAT4: 700,\n        FLOAT8: 701,\n        ABSTIME: 702,\n        RELTIME: 703,\n        TINTERVAL: 704,\n        CIRCLE: 718,\n        MACADDR8: 774,\n        MONEY: 790,\n        MACADDR: 829,\n        INET: 869,\n        ACLITEM: 1033,\n        BPCHAR: 1042,\n        VARCHAR: 1043,\n        DATE: 1082,\n        TIME: 1083,\n        TIMESTAMP: 1114,\n        TIMESTAMPTZ: 1184,\n        INTERVAL: 1186,\n        TIMETZ: 1266,\n        BIT: 1560,\n        VARBIT: 1562,\n        NUMERIC: 1700,\n        REFCURSOR: 1790,\n        REGPROCEDURE: 2202,\n        REGOPER: 2203,\n        REGOPERATOR: 2204,\n        REGCLASS: 2205,\n        REGTYPE: 2206,\n        UUID: 2950,\n        TXID_SNAPSHOT: 2970,\n        PG_LSN: 3220,\n        PG_NDISTINCT: 3361,\n        PG_DEPENDENCIES: 3402,\n        TSVECTOR: 3614,\n        TSQUERY: 3615,\n        GTSVECTOR: 3642,\n        REGCONFIG: 3734,\n        REGDICTIONARY: 3769,\n        JSONB: 3802,\n        REGNAMESPACE: 4089,\n        REGROLE: 4096\n    };\n});\nvar Je = I((Ze)=>{\n    p();\n    var cu = Qi(), lu = Vi(), fu = Xt(), hu = Ki();\n    Ze.getTypeParser = pu;\n    Ze.setTypeParser = du;\n    Ze.arrayParser = fu;\n    Ze.builtins = hu;\n    var Ye = {\n        text: {},\n        binary: {}\n    };\n    function Yi(r) {\n        return String(r);\n    }\n    a(Yi, \"noParse\");\n    function pu(r, e) {\n        return e = e || \"text\", Ye[e] && Ye[e][r] || Yi;\n    }\n    a(pu, \"getTypeParser\");\n    function du(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), Ye[e][r] = t;\n    }\n    a(du, \"setTypeParser\");\n    cu.init(function(r, e) {\n        Ye.text[r] = e;\n    });\n    lu.init(function(r, e) {\n        Ye.binary[r] = e;\n    });\n});\nvar St = I((Sf, Zi)=>{\n    \"use strict\";\n    p();\n    var yu = Je();\n    function xt(r) {\n        this._types = r || yu, this.text = {}, this.binary = {};\n    }\n    a(xt, \"TypeOverrides\");\n    xt.prototype.getOverrides = function(r) {\n        switch(r){\n            case \"text\":\n                return this.text;\n            case \"binary\":\n                return this.binary;\n            default:\n                return {};\n        }\n    };\n    xt.prototype.setTypeParser = function(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), this.getOverrides(e)[r] = t;\n    };\n    xt.prototype.getTypeParser = function(r, e) {\n        return e = e || \"text\", this.getOverrides(e)[r] || this._types.getTypeParser(r, e);\n    };\n    Zi.exports = xt;\n});\nfunction Xe(r) {\n    let e = 1779033703, t = 3144134277, n = 1013904242, i = 2773480762, s = 1359893119, o = 2600822924, u = 528734635, c = 1541459225, l = 0, f = 0, y = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ], g = a((_, x)=>_ >>> x | _ << 32 - x, \"rrot\"), A = new Uint32Array(64), C = new Uint8Array(64), Q = a(()=>{\n        for(let B = 0, $ = 0; B < 16; B++, $ += 4)A[B] = C[$] << 24 | C[$ + 1] << 16 | C[$ + 2] << 8 | C[$ + 3];\n        for(let B = 16; B < 64; B++){\n            let $ = g(A[B - 15], 7) ^ g(A[B - 15], 18) ^ A[B - 15] >>> 3, fe = g(A[B - 2], 17) ^ g(A[B - 2], 19) ^ A[B - 2] >>> 10;\n            A[B] = A[B - 16] + $ + A[B - 7] + fe | 0;\n        }\n        let _ = e, x = t, H = n, le = i, N = s, ie = o, se = u, oe = c;\n        for(let B = 0; B < 64; B++){\n            let $ = g(N, 6) ^ g(N, 11) ^ g(N, 25), fe = N & ie ^ ~N & se, Ce = oe + $ + fe + y[B] + A[B] | 0, he = g(_, 2) ^ g(_, 13) ^ g(_, 22), _e = _ & x ^ _ & H ^ x & H, ae = he + _e | 0;\n            oe = se, se = ie, ie = N, N = le + Ce | 0, le = H, H = x, x = _, _ = Ce + ae | 0;\n        }\n        e = e + _ | 0, t = t + x | 0, n = n + H | 0, i = i + le | 0, s = s + N | 0, o = o + ie | 0, u = u + se | 0, c = c + oe | 0, f = 0;\n    }, \"process\"), P = a((_)=>{\n        typeof _ == \"string\" && (_ = new TextEncoder().encode(_));\n        for(let x = 0; x < _.length; x++)C[f++] = _[x], f === 64 && Q();\n        l += _.length;\n    }, \"add\"), L = a(()=>{\n        if (C[f++] = 128, f == 64 && Q(), f + 8 > 64) {\n            for(; f < 64;)C[f++] = 0;\n            Q();\n        }\n        for(; f < 58;)C[f++] = 0;\n        let _ = l * 8;\n        C[f++] = _ / 1099511627776 & 255, C[f++] = _ / 4294967296 & 255, C[f++] = _ >>> 24, C[f++] = _ >>> 16 & 255, C[f++] = _ >>> 8 & 255, C[f++] = _ & 255, Q();\n        let x = new Uint8Array(32);\n        return x[0] = e >>> 24, x[1] = e >>> 16 & 255, x[2] = e >>> 8 & 255, x[3] = e & 255, x[4] = t >>> 24, x[5] = t >>> 16 & 255, x[6] = t >>> 8 & 255, x[7] = t & 255, x[8] = n >>> 24, x[9] = n >>> 16 & 255, x[10] = n >>> 8 & 255, x[11] = n & 255, x[12] = i >>> 24, x[13] = i >>> 16 & 255, x[14] = i >>> 8 & 255, x[15] = i & 255, x[16] = s >>> 24, x[17] = s >>> 16 & 255, x[18] = s >>> 8 & 255, x[19] = s & 255, x[20] = o >>> 24, x[21] = o >>> 16 & 255, x[22] = o >>> 8 & 255, x[23] = o & 255, x[24] = u >>> 24, x[25] = u >>> 16 & 255, x[26] = u >>> 8 & 255, x[27] = u & 255, x[28] = c >>> 24, x[29] = c >>> 16 & 255, x[30] = c >>> 8 & 255, x[31] = c & 255, x;\n    }, \"digest\");\n    return r === void 0 ? {\n        add: P,\n        digest: L\n    } : (P(r), L());\n}\nvar Ji = z(()=>{\n    \"use strict\";\n    p();\n    a(Xe, \"sha256\");\n});\nvar U, et, Xi = z(()=>{\n    \"use strict\";\n    p();\n    U = class U {\n        constructor(){\n            E(this, \"_dataLength\", 0);\n            E(this, \"_bufferLength\", 0);\n            E(this, \"_state\", new Int32Array(4));\n            E(this, \"_buffer\", new ArrayBuffer(68));\n            E(this, \"_buffer8\");\n            E(this, \"_buffer32\");\n            this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();\n        }\n        static hashByteArray(e, t = !1) {\n            return this.onePassHasher.start().appendByteArray(e).end(t);\n        }\n        static hashStr(e, t = !1) {\n            return this.onePassHasher.start().appendStr(e).end(t);\n        }\n        static hashAsciiStr(e, t = !1) {\n            return this.onePassHasher.start().appendAsciiStr(e).end(t);\n        }\n        static _hex(e) {\n            let t = U.hexChars, n = U.hexOut, i, s, o, u;\n            for(u = 0; u < 4; u += 1)for(s = u * 8, i = e[u], o = 0; o < 8; o += 2)n[s + 1 + o] = t.charAt(i & 15), i >>>= 4, n[s + 0 + o] = t.charAt(i & 15), i >>>= 4;\n            return n.join(\"\");\n        }\n        static _md5cycle(e, t) {\n            let n = e[0], i = e[1], s = e[2], o = e[3];\n            n += (i & s | ~i & o) + t[0] - 680876936 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[1] - 389564586 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[2] + 606105819 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[3] - 1044525330 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[4] - 176418897 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[5] + 1200080426 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[6] - 1473231341 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[7] - 45705983 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[8] + 1770035416 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[9] - 1958414417 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[10] - 42063 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[11] - 1990404162 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[12] + 1804603682 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[13] - 40341101 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[14] - 1502002290 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[15] + 1236535329 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & o | s & ~o) + t[1] - 165796510 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[6] - 1069501632 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[11] + 643717713 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[0] - 373897302 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[5] - 701558691 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[10] + 38016083 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[15] - 660478335 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[4] - 405537848 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[9] + 568446438 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[14] - 1019803690 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[3] - 187363961 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[8] + 1163531501 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[13] - 1444681467 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[2] - 51403784 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[7] + 1735328473 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[12] - 1926607734 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i ^ s ^ o) + t[5] - 378558 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[8] - 2022574463 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[11] + 1839030562 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[14] - 35309556 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[1] - 1530992060 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[4] + 1272893353 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[7] - 155497632 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[10] - 1094730640 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[13] + 681279174 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[0] - 358537222 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[3] - 722521979 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[6] + 76029189 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[9] - 640364487 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[12] - 421815835 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[15] + 530742520 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[2] - 995338651 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (s ^ (i | ~o)) + t[0] - 198630844 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[7] + 1126891415 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[14] - 1416354905 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[5] - 57434055 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[12] + 1700485571 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[3] - 1894986606 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[10] - 1051523 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[1] - 2054922799 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[8] + 1873313359 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[15] - 30611744 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[6] - 1560198380 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[13] + 1309151649 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[4] - 145523070 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[11] - 1120210379 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[2] + 718787259 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[9] - 343485551 | 0, i = (i << 21 | i >>> 11) + s | 0, e[0] = n + e[0] | 0, e[1] = i + e[1] | 0, e[2] = s + e[2] | 0, e[3] = o + e[3] | 0;\n        }\n        start() {\n            return this._dataLength = 0, this._bufferLength = 0, this._state.set(U.stateIdentity), this;\n        }\n        appendStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o;\n            for(o = 0; o < e.length; o += 1){\n                if (s = e.charCodeAt(o), s < 128) t[i++] = s;\n                else if (s < 2048) t[i++] = (s >>> 6) + 192, t[i++] = s & 63 | 128;\n                else if (s < 55296 || s > 56319) t[i++] = (s >>> 12) + 224, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                else {\n                    if (s = (s - 55296) * 1024 + (e.charCodeAt(++o) - 56320) + 65536, s > 1114111) throw new Error(\"Unicode standard supports code points up to U+10FFFF\");\n                    t[i++] = (s >>> 18) + 240, t[i++] = s >>> 12 & 63 | 128, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                }\n                i >= 64 && (this._dataLength += 64, U._md5cycle(this._state, n), i -= 64, n[0] = n[16]);\n            }\n            return this._bufferLength = i, this;\n        }\n        appendAsciiStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e.charCodeAt(o++);\n                if (i < 64) break;\n                this._dataLength += 64, U._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        appendByteArray(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e[o++];\n                if (i < 64) break;\n                this._dataLength += 64, U._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        getState() {\n            let e = this._state;\n            return {\n                buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),\n                buflen: this._bufferLength,\n                length: this._dataLength,\n                state: [\n                    e[0],\n                    e[1],\n                    e[2],\n                    e[3]\n                ]\n            };\n        }\n        setState(e) {\n            let t = e.buffer, n = e.state, i = this._state, s;\n            for(this._dataLength = e.length, this._bufferLength = e.buflen, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3], s = 0; s < t.length; s += 1)this._buffer8[s] = t.charCodeAt(s);\n        }\n        end(e = !1) {\n            let t = this._bufferLength, n = this._buffer8, i = this._buffer32, s = (t >> 2) + 1;\n            this._dataLength += t;\n            let o = this._dataLength * 8;\n            if (n[t] = 128, n[t + 1] = n[t + 2] = n[t + 3] = 0, i.set(U.buffer32Identity.subarray(s), s), t > 55 && (U._md5cycle(this._state, i), i.set(U.buffer32Identity)), o <= 4294967295) i[14] = o;\n            else {\n                let u = o.toString(16).match(/(.*?)(.{0,8})$/);\n                if (u === null) return;\n                let c = parseInt(u[2], 16), l = parseInt(u[1], 16) || 0;\n                i[14] = c, i[15] = l;\n            }\n            return U._md5cycle(this._state, i), e ? this._state : U._hex(this._state);\n        }\n    };\n    a(U, \"Md5\"), E(U, \"stateIdentity\", new Int32Array([\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ])), E(U, \"buffer32Identity\", new Int32Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ])), E(U, \"hexChars\", \"0123456789abcdef\"), E(U, \"hexOut\", []), E(U, \"onePassHasher\", new U);\n    et = U;\n});\nvar ar = {};\nne(ar, {\n    createHash: ()=>gu,\n    createHmac: ()=>wu,\n    randomBytes: ()=>mu\n});\nfunction mu(r) {\n    return crypto.getRandomValues(d.alloc(r));\n}\nfunction gu(r) {\n    if (r === \"sha256\") return {\n        update: a(function(e) {\n            return {\n                digest: a(function() {\n                    return d.from(Xe(e));\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n    if (r === \"md5\") return {\n        update: a(function(e) {\n            return {\n                digest: a(function() {\n                    return typeof e == \"string\" ? et.hashStr(e) : et.hashByteArray(e);\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n    throw new Error(`Hash type '${r}' not supported`);\n}\nfunction wu(r, e) {\n    if (r !== \"sha256\") throw new Error(`\\\nOnly sha256 is supported (requested: '${r}')`);\n    return {\n        update: a(function(t) {\n            return {\n                digest: a(function() {\n                    typeof e == \"string\" && (e = new TextEncoder().encode(e)), typeof t == \"string\" && (t = new TextEncoder().encode(t));\n                    let n = e.length;\n                    if (n > 64) e = Xe(e);\n                    else if (n < 64) {\n                        let c = new Uint8Array(64);\n                        c.set(e), e = c;\n                    }\n                    let i = new Uint8Array(64), s = new Uint8Array(64);\n                    for(let c = 0; c < 64; c++)i[c] = 54 ^ e[c], s[c] = 92 ^ e[c];\n                    let o = new Uint8Array(t.length + 64);\n                    o.set(i, 0), o.set(t, 64);\n                    let u = new Uint8Array(96);\n                    return u.set(s, 0), u.set(Xe(o), 64), d.from(Xe(u));\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n}\nvar ur = z(()=>{\n    \"use strict\";\n    p();\n    Ji();\n    Xi();\n    a(mu, \"randomBytes\");\n    a(gu, \"createHash\");\n    a(wu, \"createHmac\");\n});\nvar tt = I((Mf, cr)=>{\n    \"use strict\";\n    p();\n    cr.exports = {\n        host: \"localhost\",\n        user: m.platform === \"win32\" ? m.env.USERNAME : m.env.USER,\n        database: void 0,\n        password: null,\n        connectionString: void 0,\n        port: 5432,\n        rows: 0,\n        binary: !1,\n        max: 10,\n        idleTimeoutMillis: 3e4,\n        client_encoding: \"\",\n        ssl: !1,\n        application_name: void 0,\n        fallback_application_name: void 0,\n        options: void 0,\n        parseInputDatesAsUTC: !1,\n        statement_timeout: !1,\n        lock_timeout: !1,\n        idle_in_transaction_session_timeout: !1,\n        query_timeout: !1,\n        connect_timeout: 0,\n        keepalives: 1,\n        keepalives_idle: 0\n    };\n    var ke = Je(), bu = ke.getTypeParser(20, \"text\"), vu = ke.getTypeParser(1016, \"text\");\n    cr.exports.__defineSetter__(\"parseInt8\", function(r) {\n        ke.setTypeParser(20, \"text\", r ? ke.getTypeParser(23, \"text\") : bu), ke.setTypeParser(1016, \"text\", r ? ke.getTypeParser(1007, \"text\") : vu);\n    });\n});\nvar rt = I((Df, ts)=>{\n    \"use strict\";\n    p();\n    var xu = (ur(), D(ar)), Su = tt();\n    function Eu(r) {\n        var e = r.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n        return '\"' + e + '\"';\n    }\n    a(Eu, \"escapeElement\");\n    function es(r) {\n        for(var e = \"{\", t = 0; t < r.length; t++)t > 0 && (e = e + \",\"), r[t] === null || typeof r[t] > \"u\" ? e = e + \"NULL\" : Array.isArray(r[t]) ? e = e + es(r[t]) : r[t] instanceof d ? e += \"\\\\\\\\x\" + r[t].toString(\"hex\") : e += Eu(Et(r[t]));\n        return e = e + \"}\", e;\n    }\n    a(es, \"arrayString\");\n    var Et = a(function(r, e) {\n        if (r == null) return null;\n        if (r instanceof d) return r;\n        if (ArrayBuffer.isView(r)) {\n            var t = d.from(r.buffer, r.byteOffset, r.byteLength);\n            return t.length === r.byteLength ? t : t.slice(r.byteOffset, r.byteOffset + r.byteLength);\n        }\n        return r instanceof Date ? Su.parseInputDatesAsUTC ? _u(r) : Cu(r) : Array.isArray(r) ? es(r) : typeof r == \"object\" ? Au(r, e) : r.toString();\n    }, \"prepareValue\");\n    function Au(r, e) {\n        if (r && typeof r.toPostgres == \"function\") {\n            if (e = e || [], e.indexOf(r) !== -1) throw new Error('circular reference detected while preparing \"' + r + '\" for query');\n            return e.push(r), Et(r.toPostgres(Et), e);\n        }\n        return JSON.stringify(r);\n    }\n    a(Au, \"prepareObject\");\n    function W(r, e) {\n        for(r = \"\" + r; r.length < e;)r = \"0\" + r;\n        return r;\n    }\n    a(W, \"pad\");\n    function Cu(r) {\n        var e = -r.getTimezoneOffset(), t = r.getFullYear(), n = t < 1;\n        n && (t = Math.abs(t) + 1);\n        var i = W(t, 4) + \"-\" + W(r.getMonth() + 1, 2) + \"-\" + W(r.getDate(), 2) + \"T\" + W(r.getHours(), 2) + \":\" + W(r.getMinutes(), 2) + \":\" + W(r.getSeconds(), 2) + \".\" + W(r.getMilliseconds(), 3);\n        return e < 0 ? (i += \"-\", e *= -1) : i += \"+\", i += W(Math.floor(e / 60), 2) + \":\" + W(e % 60, 2), n && (i += \" BC\"), i;\n    }\n    a(Cu, \"dateToString\");\n    function _u(r) {\n        var e = r.getUTCFullYear(), t = e < 1;\n        t && (e = Math.abs(e) + 1);\n        var n = W(e, 4) + \"-\" + W(r.getUTCMonth() + 1, 2) + \"-\" + W(r.getUTCDate(), 2) + \"T\" + W(r.getUTCHours(), 2) + \":\" + W(r.getUTCMinutes(), 2) + \":\" + W(r.getUTCSeconds(), 2) + \".\" + W(r.getUTCMilliseconds(), 3);\n        return n += \"+00:00\", t && (n += \" BC\"), n;\n    }\n    a(_u, \"dateToStringUTC\");\n    function Tu(r, e, t) {\n        return r = typeof r == \"string\" ? {\n            text: r\n        } : r, e && (typeof e == \"function\" ? r.callback = e : r.values = e), t && (r.callback = t), r;\n    }\n    a(Tu, \"normalizeQueryConfig\");\n    var lr = a(function(r) {\n        return xu.createHash(\"md5\").update(r, \"utf-8\").digest(\"hex\");\n    }, \"md5\"), Iu = a(function(r, e, t) {\n        var n = lr(e + r), i = lr(d.concat([\n            d.from(n),\n            t\n        ]));\n        return \"md5\" + i;\n    }, \"postgresMd5PasswordHash\");\n    ts.exports = {\n        prepareValue: a(function(e) {\n            return Et(e);\n        }, \"prepareValueWrapper\"),\n        normalizeQueryConfig: Tu,\n        postgresMd5PasswordHash: Iu,\n        md5: lr\n    };\n});\nvar nt = {};\nne(nt, {\n    default: ()=>Lu\n});\nvar Lu, it = z(()=>{\n    \"use strict\";\n    p();\n    Lu = {};\n});\nvar hs = I((zf, fs)=>{\n    \"use strict\";\n    p();\n    var hr = (ur(), D(ar));\n    function Fu(r) {\n        if (r.indexOf(\"SCRAM-SHA-256\") === -1) throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n        let e = hr.randomBytes(18).toString(\"base64\");\n        return {\n            mechanism: \"SCRAM-SHA-256\",\n            clientNonce: e,\n            response: \"n,,n=*,r=\" + e,\n            message: \"SASLInitialResponse\"\n        };\n    }\n    a(Fu, \"startSession\");\n    function ku(r, e, t) {\n        if (r.message !== \"SASLInitialResponse\") throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n        if (typeof t != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n        let n = Du(t);\n        if (n.nonce.startsWith(r.clientNonce)) {\n            if (n.nonce.length === r.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        var i = d.from(n.salt, \"base64\"), s = Qu(e, i, n.iteration), o = Me(s, \"Client Key\"), u = qu(o), c = \"n=*,r=\" + r.clientNonce, l = \"r=\" + n.nonce + \",s=\" + n.salt + \",i=\" + n.iteration, f = \"c=biws,r=\" + n.nonce, y = c + \",\" + l + \",\" + f, g = Me(u, y), A = ls(o, g), C = A.toString(\"base64\"), Q = Me(s, \"Server Key\"), P = Me(Q, y);\n        r.message = \"SASLResponse\", r.serverSignature = P.toString(\"base64\"), r.response = f + \",p=\" + C;\n    }\n    a(ku, \"continueSession\");\n    function Mu(r, e) {\n        if (r.message !== \"SASLResponse\") throw new Error(\"SASL: Last message was not SASLResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n        let { serverSignature: t } = Ou(e);\n        if (t !== r.serverSignature) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n    a(Mu, \"finalizeSession\");\n    function Uu(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: text must be a string\");\n        return r.split(\"\").map((e, t)=>r.charCodeAt(t)).every((e)=>e >= 33 && e <= 43 || e >= 45 && e <= 126);\n    }\n    a(Uu, \"isPrintableChars\");\n    function us(r) {\n        return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(r);\n    }\n    a(us, \"isBase64\");\n    function cs(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: attribute pairs text must be a string\");\n        return new Map(r.split(\",\").map((e)=>{\n            if (!/^.=/.test(e)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let t = e[0], n = e.substring(2);\n            return [\n                t,\n                n\n            ];\n        }));\n    }\n    a(cs, \"parseAttributePairs\");\n    function Du(r) {\n        let e = cs(r), t = e.get(\"r\");\n        if (t) {\n            if (!Uu(t)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n        let n = e.get(\"s\");\n        if (n) {\n            if (!us(n)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n        let i = e.get(\"i\");\n        if (i) {\n            if (!/^[1-9][0-9]*$/.test(i)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n        let s = parseInt(i, 10);\n        return {\n            nonce: t,\n            salt: n,\n            iteration: s\n        };\n    }\n    a(Du, \"parseServerFirstMessage\");\n    function Ou(r) {\n        let t = cs(r).get(\"v\");\n        if (t) {\n            if (!us(t)) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n        return {\n            serverSignature: t\n        };\n    }\n    a(Ou, \"parseServerFinalMessage\");\n    function ls(r, e) {\n        if (!d.isBuffer(r)) throw new TypeError(\"first argument must be a Buffer\");\n        if (!d.isBuffer(e)) throw new TypeError(\"second argument must be a Buffer\");\n        if (r.length !== e.length) throw new Error(\"Buffer lengths must match\");\n        if (r.length === 0) throw new Error(\"Buffers cannot be empty\");\n        return d.from(r.map((t, n)=>r[n] ^ e[n]));\n    }\n    a(ls, \"xorBuffers\");\n    function qu(r) {\n        return hr.createHash(\"sha256\").update(r).digest();\n    }\n    a(qu, \"sha256\");\n    function Me(r, e) {\n        return hr.createHmac(\"sha256\", r).update(e).digest();\n    }\n    a(Me, \"hmacSha256\");\n    function Qu(r, e, t) {\n        for(var n = Me(r, d.concat([\n            e,\n            d.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ])), i = n, s = 0; s < t - 1; s++)n = Me(r, n), i = ls(i, n);\n        return i;\n    }\n    a(Qu, \"Hi\");\n    fs.exports = {\n        startSession: Fu,\n        continueSession: ku,\n        finalizeSession: Mu\n    };\n});\nvar pr = {};\nne(pr, {\n    join: ()=>Nu\n});\nfunction Nu(...r) {\n    return r.join(\"/\");\n}\nvar dr = z(()=>{\n    \"use strict\";\n    p();\n    a(Nu, \"join\");\n});\nvar yr = {};\nne(yr, {\n    stat: ()=>ju\n});\nfunction ju(r, e) {\n    e(new Error(\"No filesystem\"));\n}\nvar mr = z(()=>{\n    \"use str\\\nict\";\n    p();\n    a(ju, \"stat\");\n});\nvar gr = {};\nne(gr, {\n    default: ()=>Wu\n});\nvar Wu, wr = z(()=>{\n    \"use strict\";\n    p();\n    Wu = {};\n});\nvar ps = {};\nne(ps, {\n    StringDecoder: ()=>br\n});\nvar vr, br, ds = z(()=>{\n    \"use strict\";\n    p();\n    vr = class vr {\n        constructor(e){\n            E(this, \"td\");\n            this.td = new TextDecoder(e);\n        }\n        write(e) {\n            return this.td.decode(e, {\n                stream: !0\n            });\n        }\n        end(e) {\n            return this.td.decode(e);\n        }\n    };\n    a(vr, \"StringDecoder\");\n    br = vr;\n});\nvar ws = I((ih, gs)=>{\n    \"use strict\";\n    p();\n    var { Transform: Hu } = (wr(), D(gr)), { StringDecoder: $u } = (ds(), D(ps)), be = Symbol(\"last\"), Ct = Symbol(\"decoder\");\n    function Gu(r, e, t) {\n        let n;\n        if (this.overflow) {\n            if (n = this[Ct].write(r).split(this.matcher), n.length === 1) return t();\n            n.shift(), this.overflow = !1;\n        } else this[be] += this[Ct].write(r), n = this[be].split(this.matcher);\n        this[be] = n.pop();\n        for(let i = 0; i < n.length; i++)try {\n            ms(this, this.mapper(n[i]));\n        } catch (s) {\n            return t(s);\n        }\n        if (this.overflow = this[be].length > this.maxLength, this.overflow && !this.skipOverflow) {\n            t(new Error(\"maximum buffer reached\"));\n            return;\n        }\n        t();\n    }\n    a(Gu, \"transform\");\n    function Vu(r) {\n        if (this[be] += this[Ct].end(), this[be]) try {\n            ms(this, this.mapper(this[be]));\n        } catch (e) {\n            return r(e);\n        }\n        r();\n    }\n    a(Vu, \"flush\");\n    function ms(r, e) {\n        e !== void 0 && r.push(e);\n    }\n    a(ms, \"push\");\n    function ys(r) {\n        return r;\n    }\n    a(ys, \"noop\");\n    function zu(r, e, t) {\n        switch(r = r || /\\r?\\n/, e = e || ys, t = t || {}, arguments.length){\n            case 1:\n                typeof r == \"function\" ? (e = r, r = /\\r?\\n/) : typeof r == \"object\" && !(r instanceof RegExp) && !r[Symbol.split] && (t = r, r = /\\r?\\n/);\n                break;\n            case 2:\n                typeof r == \"function\" ? (t = e, e = r, r = /\\r?\\n/) : typeof e == \"object\" && (t = e, e = ys);\n        }\n        t = Object.assign({}, t), t.autoDestroy = !0, t.transform = Gu, t.flush = Vu, t.readableObjectMode = !0;\n        let n = new Hu(t);\n        return n[be] = \"\", n[Ct] = new $u(\"utf8\"), n.matcher = r, n.mapper = e, n.maxLength = t.maxLength, n.skipOverflow = t.skipOverflow || !1, n.overflow = !1, n._destroy = function(i, s) {\n            this._writableState.errorEmitted = !1, s(i);\n        }, n;\n    }\n    a(zu, \"split\");\n    gs.exports = zu;\n});\nvar xs = I((ah, de)=>{\n    \"use strict\";\n    p();\n    var bs = (dr(), D(pr)), Ku = (wr(), D(gr)).Stream, Yu = ws(), vs = (it(), D(nt)), Zu = 5432, _t = m.platform === \"win32\", st = m.stderr, Ju = 56, Xu = 7, ec = 61440, tc = 32768;\n    function rc(r) {\n        return (r & ec) == tc;\n    }\n    a(rc, \"isRegFile\");\n    var Ue = [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ], xr = Ue.length, nc = Ue[xr - 1];\n    function Sr() {\n        var r = st instanceof Ku && st.writable === !0;\n        if (r) {\n            var e = Array.prototype.slice.call(arguments).concat(`\n`);\n            st.write(vs.format.apply(vs, e));\n        }\n    }\n    a(Sr, \"warn\");\n    Object.defineProperty(de.exports, \"isWin\", {\n        get: a(function() {\n            return _t;\n        }, \"get\"),\n        set: a(function(r) {\n            _t = r;\n        }, \"set\")\n    });\n    de.exports.warnTo = function(r) {\n        var e = st;\n        return st = r, e;\n    };\n    de.exports.getFileName = function(r) {\n        var e = r || m.env, t = e.PGPASSFILE || (_t ? bs.join(e.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : bs.join(e.HOME || \"./\", \".pgpass\"));\n        return t;\n    };\n    de.exports.usePgPass = function(r, e) {\n        return Object.prototype.hasOwnProperty.call(m.env, \"PGPASSWORD\") ? !1 : _t ? !0 : (e = e || \"<unkn>\", rc(r.mode) ? r.mode & (Ju | Xu) ? (Sr('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', e), !1) : !0 : (Sr('WARNING: password file \"%s\" is not a plain file', e), !1));\n    };\n    var ic = de.exports.match = function(r, e) {\n        return Ue.slice(0, -1).reduce(function(t, n, i) {\n            return i == 1 && Number(r[n] || Zu) === Number(e[n]) ? t && !0 : t && (e[n] === \"*\" || e[n] === r[n]);\n        }, !0);\n    };\n    de.exports.getPassword = function(r, e, t) {\n        var n, i = e.pipe(Yu());\n        function s(c) {\n            var l = sc(c);\n            l && oc(l) && ic(r, l) && (n = l[nc], i.end());\n        }\n        a(s, \"onLine\");\n        var o = a(function() {\n            e.destroy(), t(n);\n        }, \"onEnd\"), u = a(function(c) {\n            e.destroy(), Sr(\"WARNING: error on reading file: %s\", c), t(void 0);\n        }, \"onErr\");\n        e.on(\"error\", u), i.on(\"data\", s).on(\"end\", o).on(\"error\", u);\n    };\n    var sc = de.exports.parseLine = function(r) {\n        if (r.length < 11 || r.match(/^\\s+#/)) return null;\n        for(var e = \"\", t = \"\", n = 0, i = 0, s = 0, o = {}, u = !1, c = a(function(f, y, g) {\n            var A = r.substring(y, g);\n            Object.hasOwnProperty.call(m.env, \"PGPASS_NO_DEESCAPE\") || (A = A.replace(/\\\\([:\\\\])/g, \"$1\")), o[Ue[f]] = A;\n        }, \"addToObj\"), l = 0; l < r.length - 1; l += 1){\n            if (e = r.charAt(l + 1), t = r.charAt(l), u = n == xr - 1, u) {\n                c(n, i);\n                break;\n            }\n            l >= 0 && e == \":\" && t !== \"\\\\\" && (c(n, i, l + 1), i = l + 2, n += 1);\n        }\n        return o = Object.keys(o).length === xr ? o : null, o;\n    }, oc = de.exports.isValidEntry = function(r) {\n        for(var e = {\n            0: function(o) {\n                return o.length > 0;\n            },\n            1: function(o) {\n                return o === \"*\" ? !0 : (o = Number(o), isFinite(o) && o > 0 && o < 9007199254740992 && Math.floor(o) === o);\n            },\n            2: function(o) {\n                return o.length > 0;\n            },\n            3: function(o) {\n                return o.length > 0;\n            },\n            4: function(o) {\n                return o.length > 0;\n            }\n        }, t = 0; t < Ue.length; t += 1){\n            var n = e[t], i = r[Ue[t]] || \"\", s = n(i);\n            if (!s) return !1;\n        }\n        return !0;\n    };\n});\nvar Es = I((fh, Er)=>{\n    \"use strict\";\n    p();\n    var lh = (dr(), D(pr)), Ss = (mr(), D(yr)), Tt = xs();\n    Er.exports = function(r, e) {\n        var t = Tt.getFileName();\n        Ss.stat(t, function(n, i) {\n            if (n || !Tt.usePgPass(i, t)) return e(void 0);\n            var s = Ss.createReadStream(t);\n            Tt.getPassword(r, s, e);\n        });\n    };\n    Er.exports.warnTo = Tt.warnTo;\n});\nvar As = {};\nne(As, {\n    default: ()=>ac\n});\nvar ac, Cs = z(()=>{\n    \"use strict\";\n    p();\n    ac = {};\n});\nvar Ts = I((dh, _s)=>{\n    \"use strict\";\n    p();\n    var uc = (zt(), D(mi)), Ar = (mr(), D(yr));\n    function Cr(r) {\n        if (r.charAt(0) === \"/\") {\n            var t = r.split(\" \");\n            return {\n                host: t[0],\n                database: t[1]\n            };\n        }\n        var e = uc.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r) ? encodeURI(r).replace(/\\%25(\\d\\d)/g, \"%$1\") : r, !0), t = e.query;\n        for(var n in t)Array.isArray(t[n]) && (t[n] = t[n][t[n].length - 1]);\n        var i = (e.auth || \":\").split(\":\");\n        if (t.user = i[0], t.password = i.splice(1).join(\":\"), t.port = e.port, e.protocol == \"socket:\") return t.host = decodeURI(e.pathname), t.database = e.query.db, t.client_encoding = e.query.encoding, t;\n        t.host || (t.host = e.hostname);\n        var s = e.pathname;\n        if (!t.host && s && /^%2f/i.test(s)) {\n            var o = s.split(\"/\");\n            t.host = decodeURIComponent(o[0]), s = o.splice(1).join(\"/\");\n        }\n        switch(s && s.charAt(0) === \"/\" && (s = s.slice(1) || null), t.database = s && decodeURI(s), (t.ssl === \"true\" || t.ssl === \"1\") && (t.ssl = !0), t.ssl === \"0\" && (t.ssl = !1), (t.sslcert || t.sslkey || t.sslrootcert || t.sslmode) && (t.ssl = {}), t.sslcert && (t.ssl.cert = Ar.readFileSync(t.sslcert).toString()), t.sslkey && (t.ssl.key = Ar.readFileSync(t.sslkey).toString()), t.sslrootcert && (t.ssl.ca = Ar.readFileSync(t.sslrootcert).toString()), t.sslmode){\n            case \"disable\":\n                {\n                    t.ssl = !1;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                break;\n            case \"no-verify\":\n                {\n                    t.ssl.rejectUnauthorized = !1;\n                    break;\n                }\n        }\n        return t;\n    }\n    a(Cr, \"parse\");\n    _s.exports = Cr;\n    Cr.parse = Cr;\n});\nvar It = I((gh, Rs)=>{\n    \"use strict\";\n    p();\n    var cc = (Cs(), D(As)), Ps = tt(), Is = Ts().parse, G = a(function(r, e, t) {\n        return t === void 0 ? t = m.env[\"PG\" + r.toUpperCase()] : t === !1 || (t = m.env[t]), e[r] || t || Ps[r];\n    }, \"val\"), lc = a(function() {\n        switch(m.env.PGSSLMODE){\n            case \"disable\":\n                return !1;\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                return !0;\n            case \"no-verify\":\n                return {\n                    rejectUnauthorized: !1\n                };\n        }\n        return Ps.ssl;\n    }, \"readSSLConfigFromEnvironment\"), De = a(function(r) {\n        return \"'\" + (\"\" + r).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n    }, \"quoteParamValue\"), re = a(function(r, e, t) {\n        var n = e[t];\n        n != null && r.push(t + \"=\" + De(n));\n    }, \"add\"), Tr = class Tr {\n        constructor(e){\n            e = typeof e == \"string\" ? Is(e) : e || {}, e.connectionString && (e = Object.assign({}, e, Is(e.connectionString))), this.user = G(\"user\", e), this.database = G(\"database\", e), this.database === void 0 && (this.database = this.user), this.port = parseInt(G(\"port\", e), 10), this.host = G(\"host\", e), Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: G(\"password\", e)\n            }), this.binary = G(\"binary\", e), this.options = G(\"options\", e), this.ssl = typeof e.ssl > \"u\" ? lc() : e.ssl, typeof this.ssl == \"string\" && this.ssl === \"true\" && (this.ssl = !0), this.ssl === \"no-verify\" && (this.ssl = {\n                rejectUnauthorized: !1\n            }), this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this.client_encoding = G(\"client_encoding\", e), this.replication = G(\"replication\", e), this.isDomainSocket = !(this.host || \"\").indexOf(\"/\"), this.application_name = G(\"application_name\", e, \"PGAPPNAME\"), this.fallback_application_name = G(\"fallback_application_name\", e, !1), this.statement_timeout = G(\"statement_timeout\", e, !1), this.lock_timeout = G(\"lock_timeout\", e, !1), this.idle_in_transaction_session_timeout = G(\"idle_in_transaction_session_timeout\", e, !1), this.query_timeout = G(\"query_timeout\", e, !1), e.connectionTimeoutMillis === void 0 ? this.connect_timeout = m.env.PGCONNECT_TIMEOUT || 0 : this.connect_timeout = Math.floor(e.connectionTimeoutMillis / 1e3), e.keepAlive === !1 ? this.keepalives = 0 : e.keepAlive === !0 && (this.keepalives = 1), typeof e.keepAliveInitialDelayMillis == \"number\" && (this.keepalives_idle = Math.floor(e.keepAliveInitialDelayMillis / 1e3));\n        }\n        getLibpqConnectionString(e) {\n            var t = [];\n            re(t, this, \"user\"), re(t, this, \"password\"), re(t, this, \"port\"), re(t, this, \"application_name\"), re(t, this, \"fallback_application_name\"), re(t, this, \"connect_timeout\"), re(t, this, \"options\");\n            var n = typeof this.ssl == \"object\" ? this.ssl : this.ssl ? {\n                sslmode: this.ssl\n            } : {};\n            if (re(t, n, \"sslmode\"), re(t, n, \"sslca\"), re(t, n, \"sslkey\"), re(t, n, \"sslcert\"), re(t, n, \"sslrootcert\"), this.database && t.push(\"dbname=\" + De(this.database)), this.replication && t.push(\"replication=\" + De(this.replication)), this.host && t.push(\"host=\" + De(this.host)), this.isDomainSocket) return e(null, t.join(\" \"));\n            this.client_encoding && t.push(\"client_encoding=\" + De(this.client_encoding)), cc.lookup(this.host, function(i, s) {\n                return i ? e(i, null) : (t.push(\"hostaddr=\" + De(s)), e(null, t.join(\" \")));\n            });\n        }\n    };\n    a(Tr, \"ConnectionParameters\");\n    var _r = Tr;\n    Rs.exports = _r;\n});\nvar Fs = I((vh, Ls)=>{\n    \"use strict\";\n    p();\n    var fc = Je(), Bs = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/, Pr = class Pr {\n        constructor(e, t){\n            this.command = null, this.rowCount = null, this.oid = null, this.rows = [], this.fields = [], this._parsers = void 0, this._types = t, this.RowCtor = null, this.rowAsArray = e === \"array\", this.rowAsArray && (this.parseRow = this._parseRowAsArray);\n        }\n        addCommandComplete(e) {\n            var t;\n            e.text ? t = Bs.exec(e.text) : t = Bs.exec(e.command), t && (this.command = t[1], t[3] ? (this.oid = parseInt(t[2], 10), this.rowCount = parseInt(t[3], 10)) : t[2] && (this.rowCount = parseInt(t[2], 10)));\n        }\n        _parseRowAsArray(e) {\n            for(var t = new Array(e.length), n = 0, i = e.length; n < i; n++){\n                var s = e[n];\n                s !== null ? t[n] = this._parsers[n](s) : t[n] = null;\n            }\n            return t;\n        }\n        parseRow(e) {\n            for(var t = {}, n = 0, i = e.length; n < i; n++){\n                var s = e[n], o = this.fields[n].name;\n                s !== null ? t[o] = this._parsers[n](s) : t[o] = null;\n            }\n            return t;\n        }\n        addRow(e) {\n            this.rows.push(e);\n        }\n        addFields(e) {\n            this.fields = e, this.fields.length && (this._parsers = new Array(e.length));\n            for(var t = 0; t < e.length; t++){\n                var n = e[t];\n                this._types ? this._parsers[t] = this._types.getTypeParser(n.dataTypeID, n.format || \"text\") : this._parsers[t] = fc.getTypeParser(n.dataTypeID, n.format || \"text\");\n            }\n        }\n    };\n    a(Pr, \"Result\");\n    var Ir = Pr;\n    Ls.exports = Ir;\n});\nvar Ds = I((Eh, Us)=>{\n    \"use strict\";\n    p();\n    var { EventEmitter: hc } = me(), ks = Fs(), Ms = rt(), Br = class Br extends hc {\n        constructor(e, t, n){\n            super(), e = Ms.normalizeQueryConfig(e, t, n), this.text = e.text, this.values = e.values, this.rows = e.rows, this.types = e.types, this.name = e.name, this.binary = e.binary, this.portal = e.portal || \"\", this.callback = e.callback, this._rowMode = e.rowMode, m.domain && e.callback && (this.callback = m.domain.bind(e.callback)), this._result = new ks(this._rowMode, this.types), this._results = this._result, this.isPreparedStatement = !1, this._canceledDueToError = !1, this._promise = null;\n        }\n        requiresPreparation() {\n            return this.name || this.rows ? !0 : !this.text || !this.values ? !1 : this.values.length > 0;\n        }\n        _checkForMultirow() {\n            this._result.command && (Array.isArray(this._results) || (this._results = [\n                this._result\n            ]), this._result = new ks(this._rowMode, this.types), this._results.push(this._result));\n        }\n        handleRowDescription(e) {\n            this._checkForMultirow(), this._result.addFields(e.fields), this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n        }\n        handleDataRow(e) {\n            let t;\n            if (!this._canceledDueToError) {\n                try {\n                    t = this._result.parseRow(e.fields);\n                } catch (n) {\n                    this._canceledDueToError = n;\n                    return;\n                }\n                this.emit(\"row\", t, this._result), this._accumulateRows && this._result.addRow(t);\n            }\n        }\n        handleCommandComplete(e, t) {\n            this._checkForMultirow(), this._result.addCommandComplete(e), this.rows && t.sync();\n        }\n        handleEmptyQuery(e) {\n            this.rows && e.sync();\n        }\n        handleError(e, t) {\n            if (this._canceledDueToError && (e = this._canceledDueToError, this._canceledDueToError = !1), this.callback) return this.callback(e);\n            this.emit(\"error\", e);\n        }\n        handleReadyForQuery(e) {\n            if (this._canceledDueToError) return this.handleError(this._canceledDueToError, e);\n            if (this.callback) try {\n                this.callback(null, this._results);\n            } catch (t) {\n                m.nextTick(()=>{\n                    throw t;\n                });\n            }\n            this.emit(\"end\", this._results);\n        }\n        submit(e) {\n            if (typeof this.text != \"string\" && typeof this.name != \"string\") return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n            let t = e.parsedStatements[this.name];\n            return this.text && t && this.text !== t ? new Error(`Prepared statements must be unique - '${this.name}\\\n' was used for a different statement`) : this.values && !Array.isArray(this.values) ? new Error(\"Query values must be an array\") : (this.requiresPreparation() ? this.prepare(e) : e.query(this.text), null);\n        }\n        hasBeenParsed(e) {\n            return this.name && e.parsedStatements[this.name];\n        }\n        handlePortalSuspended(e) {\n            this._getRows(e, this.rows);\n        }\n        _getRows(e, t) {\n            e.execute({\n                portal: this.portal,\n                rows: t\n            }), t ? e.flush() : e.sync();\n        }\n        prepare(e) {\n            this.isPreparedStatement = !0, this.hasBeenParsed(e) || e.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n            try {\n                e.bind({\n                    portal: this.portal,\n                    statement: this.name,\n                    values: this.values,\n                    binary: this.binary,\n                    valueMapper: Ms.prepareValue\n                });\n            } catch (t) {\n                this.handleError(t, e);\n                return;\n            }\n            e.describe({\n                type: \"P\",\n                name: this.portal || \"\"\n            }), this._getRows(e, this.rows);\n        }\n        handleCopyInResponse(e) {\n            e.sendCopyFail(\"No source stream defined\");\n        }\n        handleCopyData(e, t) {}\n    };\n    a(Br, \"Query\");\n    var Rr = Br;\n    Us.exports = Rr;\n});\nvar an = I((T)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(T, \"__esModule\", {\n        value: !0\n    });\n    T.NoticeMessage = T.DataRowMessage = T.CommandCompleteMessage = T.ReadyForQueryMessage = T.NotificationResponseMessage = T.BackendKeyDataMessage = T.AuthenticationMD5Password = T.ParameterStatusMessage = T.ParameterDescriptionMessage = T.RowDescriptionMessage = T.Field = T.CopyResponse = T.CopyDataMessage = T.DatabaseError = T.copyDone = T.emptyQuery = T.replicationStart = T.portalSuspended = T.noData = T.closeComplete = T.bindComplete = T.parseComplete = void 0;\n    T.parseComplete = {\n        name: \"parseComplete\",\n        length: 5\n    };\n    T.bindComplete = {\n        name: \"bindComplete\",\n        length: 5\n    };\n    T.closeComplete = {\n        name: \"closeComplete\",\n        length: 5\n    };\n    T.noData = {\n        name: \"noData\",\n        length: 5\n    };\n    T.portalSuspended = {\n        name: \"portalSuspended\",\n        length: 5\n    };\n    T.replicationStart = {\n        name: \"replicationStart\",\n        length: 4\n    };\n    T.emptyQuery = {\n        name: \"emptyQuery\",\n        length: 4\n    };\n    T.copyDone = {\n        name: \"copyDone\",\n        length: 4\n    };\n    var Gr = class Gr extends Error {\n        constructor(e, t, n){\n            super(e), this.length = t, this.name = n;\n        }\n    };\n    a(Gr, \"DatabaseError\");\n    var Lr = Gr;\n    T.DatabaseError = Lr;\n    var Vr = class Vr {\n        constructor(e, t){\n            this.length = e, this.chunk = t, this.name = \"copyData\";\n        }\n    };\n    a(Vr, \"CopyDataMessage\");\n    var Fr = Vr;\n    T.CopyDataMessage = Fr;\n    var zr = class zr {\n        constructor(e, t, n, i){\n            this.length = e, this.name = t, this.binary = n, this.columnTypes = new Array(i);\n        }\n    };\n    a(zr, \"CopyResponse\");\n    var kr = zr;\n    T.CopyResponse = kr;\n    var Kr = class Kr {\n        constructor(e, t, n, i, s, o, u){\n            this.name = e, this.tableID = t, this.columnID = n, this.dataTypeID = i, this.dataTypeSize = s, this.dataTypeModifier = o, this.format = u;\n        }\n    };\n    a(Kr, \"Field\");\n    var Mr = Kr;\n    T.Field = Mr;\n    var Yr = class Yr {\n        constructor(e, t){\n            this.length = e, this.fieldCount = t, this.name = \"rowDescription\", this.fields = new Array(this.fieldCount);\n        }\n    };\n    a(Yr, \"RowDescriptionMessage\");\n    var Ur = Yr;\n    T.RowDescriptionMessage = Ur;\n    var Zr = class Zr {\n        constructor(e, t){\n            this.length = e, this.parameterCount = t, this.name = \"parameterDescription\", this.dataTypeIDs = new Array(this.parameterCount);\n        }\n    };\n    a(Zr, \"ParameterDescriptionMessage\");\n    var Dr = Zr;\n    T.ParameterDescriptionMessage = Dr;\n    var Jr = class Jr {\n        constructor(e, t, n){\n            this.length = e, this.parameterName = t, this.parameterValue = n, this.name = \"parameterStatus\";\n        }\n    };\n    a(Jr, \"ParameterStatusMessage\");\n    var Or = Jr;\n    T.ParameterStatusMessage = Or;\n    var Xr = class Xr {\n        constructor(e, t){\n            this.length = e, this.salt = t, this.name = \"authenticationMD5Password\";\n        }\n    };\n    a(Xr, \"AuthenticationMD5Password\");\n    var qr = Xr;\n    T.AuthenticationMD5Password = qr;\n    var en = class en {\n        constructor(e, t, n){\n            this.length = e, this.processID = t, this.secretKey = n, this.name = \"backendKeyData\";\n        }\n    };\n    a(en, \"BackendKeyDataMessage\");\n    var Qr = en;\n    T.BackendKeyDataMessage = Qr;\n    var tn = class tn {\n        constructor(e, t, n, i){\n            this.length = e, this.processId = t, this.channel = n, this.payload = i, this.name = \"notification\";\n        }\n    };\n    a(tn, \"NotificationResponseMessage\");\n    var Nr = tn;\n    T.NotificationResponseMessage = Nr;\n    var rn = class rn {\n        constructor(e, t){\n            this.length = e, this.status = t, this.name = \"readyForQuery\";\n        }\n    };\n    a(rn, \"ReadyForQueryMessage\");\n    var jr = rn;\n    T.ReadyForQueryMessage = jr;\n    var nn = class nn {\n        constructor(e, t){\n            this.length = e, this.text = t, this.name = \"commandComplete\";\n        }\n    };\n    a(nn, \"CommandCompleteMessage\");\n    var Wr = nn;\n    T.CommandCompleteMessage = Wr;\n    var sn = class sn {\n        constructor(e, t){\n            this.length = e, this.fields = t, this.name = \"dataRow\", this.fieldCount = t.length;\n        }\n    };\n    a(sn, \"DataRowMessage\");\n    var Hr = sn;\n    T.DataRowMessage = Hr;\n    var on = class on {\n        constructor(e, t){\n            this.length = e, this.message = t, this.name = \"notice\";\n        }\n    };\n    a(on, \"NoticeMessage\");\n    var $r = on;\n    T.NoticeMessage = $r;\n});\nvar Os = I((Pt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Pt, \"__esModule\", {\n        value: !0\n    });\n    Pt.Writer = void 0;\n    var cn = class cn {\n        constructor(e = 256){\n            this.size = e, this.offset = 5, this.headerPosition = 0, this.buffer = d.allocUnsafe(e);\n        }\n        ensure(e) {\n            var t = this.buffer.length - this.offset;\n            if (t < e) {\n                var n = this.buffer, i = n.length + (n.length >> 1) + e;\n                this.buffer = d.allocUnsafe(i), n.copy(this.buffer);\n            }\n        }\n        addInt32(e) {\n            return this.ensure(4), this.buffer[this.offset++] = e >>> 24 & 255, this.buffer[this.offset++] = e >>> 16 & 255, this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addInt16(e) {\n            return this.ensure(2), this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addCString(e) {\n            if (!e) this.ensure(1);\n            else {\n                var t = d.byteLength(e);\n                this.ensure(t + 1), this.buffer.write(e, this.offset, \"utf-8\"), this.offset += t;\n            }\n            return this.buffer[this.offset++] = 0, this;\n        }\n        addString(e = \"\") {\n            var t = d.byteLength(e);\n            return this.ensure(t), this.buffer.write(e, this.offset), this.offset += t, this;\n        }\n        add(e) {\n            return this.ensure(e.length), e.copy(this.buffer, this.offset), this.offset += e.length, this;\n        }\n        join(e) {\n            if (e) {\n                this.buffer[this.headerPosition] = e;\n                let t = this.offset - (this.headerPosition + 1);\n                this.buffer.writeInt32BE(t, this.headerPosition + 1);\n            }\n            return this.buffer.slice(e ? 0 : 5, this.offset);\n        }\n        flush(e) {\n            var t = this.join(e);\n            return this.offset = 5, this.headerPosition = 0, this.buffer = d.allocUnsafe(this.size), t;\n        }\n    };\n    a(cn, \"Writer\");\n    var un = cn;\n    Pt.Writer = un;\n});\nvar Qs = I((Bt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Bt, \"__esModule\", {\n        value: !0\n    });\n    Bt.serialize = void 0;\n    var ln = Os(), k = new ln.Writer, pc = a((r)=>{\n        k.addInt16(3).addInt16(0);\n        for (let n of Object.keys(r))k.addCString(n).addCString(r[n]);\n        k.addCString(\"client_encoding\").addCString(\"UTF8\");\n        var e = k.addCString(\"\").flush(), t = e.length + 4;\n        return new ln.Writer().addInt32(t).add(e).flush();\n    }, \"startup\"), dc = a(()=>{\n        let r = d.allocUnsafe(8);\n        return r.writeInt32BE(8, 0), r.writeInt32BE(80877103, 4), r;\n    }, \"requestSsl\"), yc = a((r)=>k.addCString(r).flush(112), \"password\"), mc = a(function(r, e) {\n        return k.addCString(r).addInt32(d.byteLength(e)).addString(e), k.flush(112);\n    }, \"sendSASLInitialResponseMessage\"), gc = a(function(r) {\n        return k.addString(r).flush(112);\n    }, \"sendSCRAMClientFinalMessage\"), wc = a((r)=>k.addCString(r).flush(81), \"query\"), qs = [], bc = a((r)=>{\n        let e = r.name || \"\";\n        e.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", e, e.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n        let t = r.types || qs;\n        for(var n = t.length, i = k.addCString(e).addCString(r.text).addInt16(n), s = 0; s < n; s++)i.addInt32(t[s]);\n        return k.flush(80);\n    }, \"parse\"), Oe = new ln.Writer, vc = a(function(r, e) {\n        for(let t = 0; t < r.length; t++){\n            let n = e ? e(r[t], t) : r[t];\n            n == null ? (k.addInt16(0), Oe.addInt32(-1)) : n instanceof d ? (k.addInt16(1), Oe.addInt32(n.length), Oe.add(n)) : (k.addInt16(0), Oe.addInt32(d.byteLength(n)), Oe.addString(n));\n        }\n    }, \"writeValues\"), xc = a((r = {})=>{\n        let e = r.portal || \"\", t = r.statement || \"\", n = r.binary || !1, i = r.values || qs, s = i.length;\n        return k.addCString(e).addCString(t), k.addInt16(s), vc(i, r.valueMapper), k.addInt16(s), k.add(Oe.flush()), k.addInt16(n ? 1 : 0), k.flush(66);\n    }, \"bind\"), Sc = d.from([\n        69,\n        0,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]), Ec = a((r)=>{\n        if (!r || !r.portal && !r.rows) return Sc;\n        let e = r.portal || \"\", t = r.rows || 0, n = d.byteLength(e), i = 4 + n + 1 + 4, s = d.allocUnsafe(1 + i);\n        return s[0] = 69, s.writeInt32BE(i, 1), s.write(e, 5, \"utf-8\"), s[n + 5] = 0, s.writeUInt32BE(t, s.length - 4), s;\n    }, \"execute\"), Ac = a((r, e)=>{\n        let t = d.allocUnsafe(16);\n        return t.writeInt32BE(16, 0), t.writeInt16BE(1234, 4), t.writeInt16BE(5678, 6), t.writeInt32BE(r, 8), t.writeInt32BE(e, 12), t;\n    }, \"cancel\"), fn = a((r, e)=>{\n        let n = 4 + d.byteLength(e) + 1, i = d.allocUnsafe(1 + n);\n        return i[0] = r, i.writeInt32BE(n, 1), i.write(e, 5, \"utf-8\"), i[n] = 0, i;\n    }, \"cstringMessage\"), Cc = k.addCString(\"P\").flush(68), _c = k.addCString(\"S\").flush(68), Tc = a((r)=>r.name ? fn(68, `${r.type}${r.name || \"\"}`) : r.type === \"P\" ? Cc : _c, \"describe\"), Ic = a((r)=>{\n        let e = `${r.type}${r.name || \"\"}`;\n        return fn(67, e);\n    }, \"close\"), Pc = a((r)=>k.add(r).flush(100), \"copyData\"), Rc = a((r)=>fn(102, r), \"copyFail\"), Rt = a((r)=>d.from([\n            r,\n            0,\n            0,\n            0,\n            4\n        ]), \"codeOnlyBuffer\"), Bc = Rt(72), Lc = Rt(83), Fc = Rt(88), kc = Rt(99), Mc = {\n        startup: pc,\n        password: yc,\n        requestSsl: dc,\n        sendSASLInitialResponseMessage: mc,\n        sendSCRAMClientFinalMessage: gc,\n        query: wc,\n        parse: bc,\n        bind: xc,\n        execute: Ec,\n        describe: Tc,\n        close: Ic,\n        flush: a(()=>Bc, \"flush\"),\n        sync: a(()=>Lc, \"sync\"),\n        end: a(()=>Fc, \"end\"),\n        copyData: Pc,\n        copyDone: a(()=>kc, \"copyDone\"),\n        copyFail: Rc,\n        cancel: Ac\n    };\n    Bt.serialize = Mc;\n});\nvar Ns = I((Lt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Lt, \"__esModule\", {\n        value: !0\n    });\n    Lt.BufferReader = void 0;\n    var Uc = d.allocUnsafe(0), pn = class pn {\n        constructor(e = 0){\n            this.offset = e, this.buffer = Uc, this.encoding = \"utf-8\";\n        }\n        setBuffer(e, t) {\n            this.offset = e, this.buffer = t;\n        }\n        int16() {\n            let e = this.buffer.readInt16BE(this.offset);\n            return this.offset += 2, e;\n        }\n        byte() {\n            let e = this.buffer[this.offset];\n            return this.offset++, e;\n        }\n        int32() {\n            let e = this.buffer.readInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        uint32() {\n            let e = this.buffer.readUInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        string(e) {\n            let t = this.buffer.toString(this.encoding, this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n        cstring() {\n            let e = this.offset, t = e;\n            for(; this.buffer[t++] !== 0;);\n            return this.offset = t, this.buffer.toString(this.encoding, e, t - 1);\n        }\n        bytes(e) {\n            let t = this.buffer.slice(this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n    };\n    a(pn, \"BufferReader\");\n    var hn = pn;\n    Lt.BufferReader = hn;\n});\nvar Hs = I((Ft)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Ft, \"__esModule\", {\n        value: !0\n    });\n    Ft.Parser = void 0;\n    var M = an(), Dc = Ns(), dn = 1, Oc = 4, js = dn + Oc, Ws = d.allocUnsafe(0), mn = class mn {\n        constructor(e){\n            if (this.buffer = Ws, this.bufferLength = 0, this.bufferOffset = 0, this.reader = new Dc.BufferReader, e?.mode === \"binary\") throw new Error(\"Binary mode not supported yet\");\n            this.mode = e?.mode || \"text\";\n        }\n        parse(e, t) {\n            this.mergeBuffer(e);\n            let n = this.bufferOffset + this.bufferLength, i = this.bufferOffset;\n            for(; i + js <= n;){\n                let s = this.buffer[i], o = this.buffer.readUInt32BE(i + dn), u = dn + o;\n                if (u + i <= n) {\n                    let c = this.handlePacket(i + js, s, o, this.buffer);\n                    t(c), i += u;\n                } else break;\n            }\n            i === n ? (this.buffer = Ws, this.bufferLength = 0, this.bufferOffset = 0) : (this.bufferLength = n - i, this.bufferOffset = i);\n        }\n        mergeBuffer(e) {\n            if (this.bufferLength > 0) {\n                let t = this.bufferLength + e.byteLength;\n                if (t + this.bufferOffset > this.buffer.byteLength) {\n                    let i;\n                    if (t <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) i = this.buffer;\n                    else {\n                        let s = this.buffer.byteLength * 2;\n                        for(; t >= s;)s *= 2;\n                        i = d.allocUnsafe(s);\n                    }\n                    this.buffer.copy(i, 0, this.bufferOffset, this.bufferOffset + this.bufferLength), this.buffer = i, this.bufferOffset = 0;\n                }\n                e.copy(this.buffer, this.bufferOffset + this.bufferLength), this.bufferLength = t;\n            } else this.buffer = e, this.bufferOffset = 0, this.bufferLength = e.byteLength;\n        }\n        handlePacket(e, t, n, i) {\n            switch(t){\n                case 50:\n                    return M.bindComplete;\n                case 49:\n                    return M.parseComplete;\n                case 51:\n                    return M.closeComplete;\n                case 110:\n                    return M.noData;\n                case 115:\n                    return M.portalSuspended;\n                case 99:\n                    return M.copyDone;\n                case 87:\n                    return M.replicationStart;\n                case 73:\n                    return M.emptyQuery;\n                case 68:\n                    return this.parseDataRowMessage(e, n, i);\n                case 67:\n                    return this.parseCommandCompleteMessage(e, n, i);\n                case 90:\n                    return this.parseReadyForQueryMessage(e, n, i);\n                case 65:\n                    return this.parseNotificationMessage(e, n, i);\n                case 82:\n                    return this.parseAuthenticationResponse(e, n, i);\n                case 83:\n                    return this.parseParameterStatusMessage(e, n, i);\n                case 75:\n                    return this.parseBackendKeyData(e, n, i);\n                case 69:\n                    return this.parseErrorMessage(e, n, i, \"error\");\n                case 78:\n                    return this.parseErrorMessage(e, n, i, \"notice\");\n                case 84:\n                    return this.parseRowDescriptionMessage(e, n, i);\n                case 116:\n                    return this.parseParameterDescriptionMessage(e, n, i);\n                case 71:\n                    return this.parseCopyInMessage(e, n, i);\n                case 72:\n                    return this.parseCopyOutMessage(e, n, i);\n                case 100:\n                    return this.parseCopyData(e, n, i);\n                default:\n                    return new M.DatabaseError(\"received invalid response: \" + t.toString(16), n, \"error\");\n            }\n        }\n        parseReadyForQueryMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.string(1);\n            return new M.ReadyForQueryMessage(t, i);\n        }\n        parseCommandCompleteMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring();\n            return new M.CommandCompleteMessage(t, i);\n        }\n        parseCopyData(e, t, n) {\n            let i = n.slice(e, e + (t - 4));\n            return new M.CopyDataMessage(t, i);\n        }\n        parseCopyInMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyInResponse\");\n        }\n        parseCopyOutMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyOutResponse\");\n        }\n        parseCopyMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = this.reader.byte() !== 0, o = this.reader.int16(), u = new M.CopyResponse(t, i, s, o);\n            for(let c = 0; c < o; c++)u.columnTypes[c] = this.reader.int16();\n            return u;\n        }\n        parseNotificationMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.cstring(), o = this.reader.cstring();\n            return new M.NotificationResponseMessage(t, i, s, o);\n        }\n        parseRowDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new M.RowDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.fields[o] = this.parseField();\n            return s;\n        }\n        parseField() {\n            let e = this.reader.cstring(), t = this.reader.uint32(), n = this.reader.int16(), i = this.reader.uint32(), s = this.reader.int16(), o = this.reader.int32(), u = this.reader.int16() === 0 ? \"text\" : \"binary\";\n            return new M.Field(e, t, n, i, s, o, u);\n        }\n        parseParameterDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new M.ParameterDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.dataTypeIDs[o] = this.reader.int32();\n            return s;\n        }\n        parseDataRowMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new Array(i);\n            for(let o = 0; o < i; o++){\n                let u = this.reader.int32();\n                s[o] = u === -1 ? null : this.reader.string(u);\n            }\n            return new M.DataRowMessage(t, s);\n        }\n        parseParameterStatusMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring(), s = this.reader.cstring();\n            return new M.ParameterStatusMessage(t, i, s);\n        }\n        parseBackendKeyData(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.int32();\n            return new M.BackendKeyDataMessage(t, i, s);\n        }\n        parseAuthenticationResponse(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = {\n                name: \"authenticationOk\",\n                length: t\n            };\n            switch(i){\n                case 0:\n                    break;\n                case 3:\n                    s.length === 8 && (s.name = \"authenticationCleartextPassword\");\n                    break;\n                case 5:\n                    if (s.length === 12) {\n                        s.name = \"authenticationMD5Password\";\n                        let u = this.reader.bytes(4);\n                        return new M.AuthenticationMD5Password(t, u);\n                    }\n                    break;\n                case 10:\n                    s.name = \"authenticationSASL\", s.mechanisms = [];\n                    let o;\n                    do o = this.reader.cstring(), o && s.mechanisms.push(o);\n                    while (o);\n                    break;\n                case 11:\n                    s.name = \"authenticationSASLContinue\", s.data = this.reader.string(t - 8);\n                    break;\n                case 12:\n                    s.name = \"authenticationSASLFinal\", s.data = this.reader.string(t - 8);\n                    break;\n                default:\n                    throw new Error(\"Unknown authenticationOk message type \" + i);\n            }\n            return s;\n        }\n        parseErrorMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = {}, o = this.reader.string(1);\n            for(; o !== \"\\x00\";)s[o] = this.reader.cstring(), o = this.reader.string(1);\n            let u = s.M, c = i === \"notice\" ? new M.NoticeMessage(t, u) : new M.DatabaseError(u, t, i);\n            return c.severity = s.S, c.code = s.C, c.detail = s.D, c.hint = s.H, c.position = s.P, c.internalPosition = s.p, c.internalQuery = s.q, c.where = s.W, c.schema = s.s, c.table = s.t, c.column = s.c, c.dataType = s.d, c.constraint = s.n, c.file = s.F, c.line = s.L, c.routine = s.R, c;\n        }\n    };\n    a(mn, \"Parser\");\n    var yn = mn;\n    Ft.Parser = yn;\n});\nvar gn = I((ve)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(ve, \"__esModule\", {\n        value: !0\n    });\n    ve.DatabaseError = ve.serialize = ve.parse = void 0;\n    var qc = an();\n    Object.defineProperty(ve, \"DatabaseError\", {\n        enumerable: !0,\n        get: a(function() {\n            return qc.DatabaseError;\n        }, \"get\")\n    });\n    var Qc = Qs();\n    Object.defineProperty(ve, \"serialize\", {\n        enumerable: !0,\n        get: a(function() {\n            return Qc.serialize;\n        }, \"get\")\n    });\n    var Nc = Hs();\n    function jc(r, e) {\n        let t = new Nc.Parser;\n        return r.on(\"data\", (n)=>t.parse(n, e)), new Promise((n)=>r.on(\"end\", ()=>n()));\n    }\n    a(jc, \"parse\");\n    ve.parse = jc;\n});\nvar $s = {};\nne($s, {\n    connect: ()=>Wc\n});\nfunction Wc({ socket: r, servername: e }) {\n    return r.startTls(e), r;\n}\nvar Gs = z(()=>{\n    \"use strict\";\n    p();\n    a(Wc, \"connect\");\n});\nvar vn = I((Gh, Ks)=>{\n    \"use strict\";\n    p();\n    var Vs = (We(), D(yi)), Hc = me().EventEmitter, { parse: $c, serialize: q } = gn(), zs = q.flush(), Gc = q.sync(), Vc = q.end(), bn = class bn extends Hc {\n        constructor(e){\n            super(), e = e || {}, this.stream = e.stream || new Vs.Socket, this._keepAlive = e.keepAlive, this._keepAliveInitialDelayMillis = e.keepAliveInitialDelayMillis, this.lastBuffer = !1, this.parsedStatements = {}, this.ssl = e.ssl || !1, this._ending = !1, this._emitMessage = !1;\n            var t = this;\n            this.on(\"newListener\", function(n) {\n                n === \"message\" && (t._emitMessage = !0);\n            });\n        }\n        connect(e, t) {\n            var n = this;\n            this._connecting = !0, this.stream.setNoDelay(!0), this.stream.connect(e, t), this.stream.once(\"connect\", function() {\n                n._keepAlive && n.stream.setKeepAlive(!0, n._keepAliveInitialDelayMillis), n.emit(\"connect\");\n            });\n            let i = a(function(s) {\n                n._ending && (s.code === \"ECONNRESET\" || s.code === \"EPIPE\") || n.emit(\"error\", s);\n            }, \"reportStreamError\");\n            if (this.stream.on(\"error\", i), this.stream.on(\"close\", function() {\n                n.emit(\"end\");\n            }), !this.ssl) return this.attachListeners(this.stream);\n            this.stream.once(\"data\", function(s) {\n                var o = s.toString(\"utf8\");\n                switch(o){\n                    case \"S\":\n                        break;\n                    case \"N\":\n                        return n.stream.end(), n.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                    default:\n                        return n.stream.end(), n.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n                }\n                var u = (Gs(), D($s));\n                let c = {\n                    socket: n.stream\n                };\n                n.ssl !== !0 && (Object.assign(c, n.ssl), \"key\" in n.ssl && (c.key = n.ssl.key)), Vs.isIP(t) === 0 && (c.servername = t);\n                try {\n                    n.stream = u.connect(c);\n                } catch (l) {\n                    return n.emit(\"error\", l);\n                }\n                n.attachListeners(n.stream), n.stream.on(\"error\", i), n.emit(\"sslconnect\");\n            });\n        }\n        attachListeners(e) {\n            e.on(\"end\", ()=>{\n                this.emit(\"end\");\n            }), $c(e, (t)=>{\n                var n = t.name === \"error\" ? \"errorMessage\" : t.name;\n                this._emitMessage && this.emit(\"message\", t), this.emit(n, t);\n            });\n        }\n        requestSsl() {\n            this.stream.write(q.requestSsl());\n        }\n        startup(e) {\n            this.stream.write(q.startup(e));\n        }\n        cancel(e, t) {\n            this._send(q.cancel(e, t));\n        }\n        password(e) {\n            this._send(q.password(e));\n        }\n        sendSASLInitialResponseMessage(e, t) {\n            this._send(q.sendSASLInitialResponseMessage(e, t));\n        }\n        sendSCRAMClientFinalMessage(e) {\n            this._send(q.sendSCRAMClientFinalMessage(e));\n        }\n        _send(e) {\n            return this.stream.writable ? this.stream.write(e) : !1;\n        }\n        query(e) {\n            this._send(q.query(e));\n        }\n        parse(e) {\n            this._send(q.parse(e));\n        }\n        bind(e) {\n            this._send(q.bind(e));\n        }\n        execute(e) {\n            this._send(q.execute(e));\n        }\n        flush() {\n            this.stream.writable && this.stream.write(zs);\n        }\n        sync() {\n            this._ending = !0, this._send(zs), this._send(Gc);\n        }\n        ref() {\n            this.stream.ref();\n        }\n        unref() {\n            this.stream.unref();\n        }\n        end() {\n            if (this._ending = !0, !this._connecting || !this.stream.writable) {\n                this.stream.end();\n                return;\n            }\n            return this.stream.write(Vc, ()=>{\n                this.stream.end();\n            });\n        }\n        close(e) {\n            this._send(q.close(e));\n        }\n        describe(e) {\n            this._send(q.describe(e));\n        }\n        sendCopyFromChunk(e) {\n            this._send(q.copyData(e));\n        }\n        endCopyFrom() {\n            this._send(q.copyDone());\n        }\n        sendCopyFail(e) {\n            this._send(q.copyFail(e));\n        }\n    };\n    a(bn, \"Connection\");\n    var wn = bn;\n    Ks.exports = wn;\n});\nvar Js = I((Yh, Zs)=>{\n    \"use strict\";\n    p();\n    var zc = me().EventEmitter, Kh = (it(), D(nt)), Kc = rt(), xn = hs(), Yc = Es(), Zc = St(), Jc = It(), Ys = Ds(), Xc = tt(), el = vn(), Sn = class Sn extends zc {\n        constructor(e){\n            super(), this.connectionParameters = new Jc(e), this.user = this.connectionParameters.user, this.database = this.connectionParameters.database, this.port = this.connectionParameters.port, this.host = this.connectionParameters.host, Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: this.connectionParameters.password\n            }), this.replication = this.connectionParameters.replication;\n            var t = e || {};\n            this._Promise = t.Promise || w.Promise, this._types = new Zc(t.types), this._ending = !1, this._connecting = !1, this._connected = !1, this._connectionError = !1, this._queryable = !0, this.connection = t.connection || new el({\n                stream: t.stream,\n                ssl: this.connectionParameters.ssl,\n                keepAlive: t.keepAlive || !1,\n                keepAliveInitialDelayMillis: t.keepAliveInitialDelayMillis || 0,\n                encoding: this.connectionParameters.client_encoding || \"utf8\"\n            }), this.queryQueue = [], this.binary = t.binary || Xc.binary, this.processID = null, this.secretKey = null, this.ssl = this.connectionParameters.ssl || !1, this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this._connectionTimeoutMillis = t.connectionTimeoutMillis || 0;\n        }\n        _errorAllQueries(e) {\n            let t = a((n)=>{\n                m.nextTick(()=>{\n                    n.handleError(e, this.connection);\n                });\n            }, \"enqueueError\");\n            this.activeQuery && (t(this.activeQuery), this.activeQuery = null), this.queryQueue.forEach(t), this.queryQueue.length = 0;\n        }\n        _connect(e) {\n            var t = this, n = this.connection;\n            if (this._connectionCallback = e, this._connecting || this._connected) {\n                let i = new Error(\"Client has already been connected. You cannot reuse a client.\");\n                m.nextTick(()=>{\n                    e(i);\n                });\n                return;\n            }\n            this._connecting = !0, this.connectionTimeoutHandle, this._connectionTimeoutMillis > 0 && (this.connectionTimeoutHandle = setTimeout(()=>{\n                n._ending = !0, n.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis)), this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                t.ssl ? n.requestSsl() : n.startup(t.getStartupConf());\n            }), n.on(\"sslconnect\", function() {\n                n.startup(t.getStartupConf());\n            }), this._attachListeners(n), n.once(\"end\", ()=>{\n                let i = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n                clearTimeout(this.connectionTimeoutHandle), this._errorAllQueries(i), this._ending || (this._connecting && !this._connectionError ? this._connectionCallback ? this._connectionCallback(i) : this._handleErrorEvent(i) : this._connectionError || this._handleErrorEvent(i)), m.nextTick(()=>{\n                    this.emit(\"end\");\n                });\n            });\n        }\n        connect(e) {\n            if (e) {\n                this._connect(e);\n                return;\n            }\n            return new this._Promise((t, n)=>{\n                this._connect((i)=>{\n                    i ? n(i) : t();\n                });\n            });\n        }\n        _attachListeners(e) {\n            e.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this)), e.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this)), e.on(\"authenticationSASL\", this._handleAuthSASL.bind(this)), e.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this)), e.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this)), e.on(\"backendKeyData\", this._handleBackendKeyData.bind(this)), e.on(\"error\", this._handleErrorEvent.bind(this)), e.on(\"errorMessage\", this._handleErrorMessage.bind(this)), e.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)), e.on(\"notice\", this._handleNotice.bind(this)), e.on(\"rowDescription\", this._handleRowDescription.bind(this)), e.on(\"dataRow\", this._handleDataRow.bind(this)), e.on(\"portalSuspended\", this._handlePortalSuspended.bind(this)), e.on(\"emptyQuery\", this._handleEmptyQuery.bind(this)), e.on(\"commandComplete\", this._handleCommandComplete.bind(this)), e.on(\"parseComplete\", this._handleParseComplete.bind(this)), e.on(\"copyInResponse\", this._handleCopyInResponse.bind(this)), e.on(\"copyData\", this._handleCopyData.bind(this)), e.on(\"notification\", this._handleNotification.bind(this));\n        }\n        _checkPgPass(e) {\n            let t = this.connection;\n            typeof this.password == \"function\" ? this._Promise.resolve().then(()=>this.password()).then((n)=>{\n                if (n !== void 0) {\n                    if (typeof n != \"string\") {\n                        t.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = n;\n                } else this.connectionParameters.password = this.password = null;\n                e();\n            }).catch((n)=>{\n                t.emit(\"error\", n);\n            }) : this.password !== null ? e() : Yc(this.connectionParameters, (n)=>{\n                n !== void 0 && (this.connectionParameters.password = this.password = n), e();\n            });\n        }\n        _handleAuthCleartextPassword(e) {\n            this._checkPgPass(()=>{\n                this.connection.password(this.password);\n            });\n        }\n        _handleAuthMD5Password(e) {\n            this._checkPgPass(()=>{\n                let t = Kc.postgresMd5PasswordHash(this.user, this.password, e.salt);\n                this.connection.password(t);\n            });\n        }\n        _handleAuthSASL(e) {\n            this._checkPgPass(()=>{\n                this.saslSession = xn.startSession(e.mechanisms), this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            });\n        }\n        _handleAuthSASLContinue(e) {\n            xn.continueSession(this.saslSession, this.password, e.data), this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        }\n        _handleAuthSASLFinal(e) {\n            xn.finalizeSession(this.saslSession, e.data), this.saslSession = null;\n        }\n        _handleBackendKeyData(e) {\n            this.processID = e.processID, this.secretKey = e.secretKey;\n        }\n        _handleReadyForQuery(e) {\n            this._connecting && (this._connecting = !1, this._connected = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback && (this._connectionCallback(null, this), this._connectionCallback = null), this.emit(\"connect\"));\n            let { activeQuery: t } = this;\n            this.activeQuery = null, this.readyForQuery = !0, t && t.handleReadyForQuery(this.connection), this._pulseQueryQueue();\n        }\n        _handleErrorWhileConnecting(e) {\n            if (!this._connectionError) {\n                if (this._connectionError = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback) return this._connectionCallback(e);\n                this.emit(\"error\", e);\n            }\n        }\n        _handleErrorEvent(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            this._queryable = !1, this._errorAllQueries(e), this.emit(\"error\", e);\n        }\n        _handleErrorMessage(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            let t = this.activeQuery;\n            if (!t) {\n                this._handleErrorEvent(e);\n                return;\n            }\n            this.activeQuery = null, t.handleError(e, this.connection);\n        }\n        _handleRowDescription(e) {\n            this.activeQuery.handleRowDescription(e);\n        }\n        _handleDataRow(e) {\n            this.activeQuery.handleDataRow(e);\n        }\n        _handlePortalSuspended(e) {\n            this.activeQuery.handlePortalSuspended(this.connection);\n        }\n        _handleEmptyQuery(e) {\n            this.activeQuery.handleEmptyQuery(this.connection);\n        }\n        _handleCommandComplete(e) {\n            this.activeQuery.handleCommandComplete(e, this.connection);\n        }\n        _handleParseComplete(e) {\n            this.activeQuery.name && (this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text);\n        }\n        _handleCopyInResponse(e) {\n            this.activeQuery.handleCopyInResponse(this.connection);\n        }\n        _handleCopyData(e) {\n            this.activeQuery.handleCopyData(e, this.connection);\n        }\n        _handleNotification(e) {\n            this.emit(\"notification\", e);\n        }\n        _handleNotice(e) {\n            this.emit(\"notice\", e);\n        }\n        getStartupConf() {\n            var e = this.connectionParameters, t = {\n                user: e.user,\n                database: e.database\n            }, n = e.application_name || e.fallback_application_name;\n            return n && (t.application_name = n), e.replication && (t.replication = \"\" + e.replication), e.statement_timeout && (t.statement_timeout = String(parseInt(e.statement_timeout, 10))), e.lock_timeout && (t.lock_timeout = String(parseInt(e.lock_timeout, 10))), e.idle_in_transaction_session_timeout && (t.idle_in_transaction_session_timeout = String(parseInt(e.idle_in_transaction_session_timeout, 10))), e.options && (t.options = e.options), t;\n        }\n        cancel(e, t) {\n            if (e.activeQuery === t) {\n                var n = this.connection;\n                this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                    n.cancel(e.processID, e.secretKey);\n                });\n            } else e.queryQueue.indexOf(t) !== -1 && e.queryQueue.splice(e.queryQueue.indexOf(t), 1);\n        }\n        setTypeParser(e, t, n) {\n            return this._types.setTypeParser(e, t, n);\n        }\n        getTypeParser(e, t) {\n            return this._types.getTypeParser(e, t);\n        }\n        escapeIdentifier(e) {\n            return '\"' + e.replace(/\"/g, '\"\"') + '\"';\n        }\n        escapeLiteral(e) {\n            for(var t = !1, n = \"'\", i = 0; i < e.length; i++){\n                var s = e[i];\n                s === \"'\" ? n += s + s : s === \"\\\\\" ? (n += s + s, t = !0) : n += s;\n            }\n            return n += \"'\", t === !0 && (n = \" E\" + n), n;\n        }\n        _pulseQueryQueue() {\n            if (this.readyForQuery === !0) if (this.activeQuery = this.queryQueue.shift(), this.activeQuery) {\n                this.readyForQuery = !1, this.hasExecuted = !0;\n                let e = this.activeQuery.submit(this.connection);\n                e && m.nextTick(()=>{\n                    this.activeQuery.handleError(e, this.connection), this.readyForQuery = !0, this._pulseQueryQueue();\n                });\n            } else this.hasExecuted && (this.activeQuery = null, this.emit(\"drain\"));\n        }\n        query(e, t, n) {\n            var i, s, o, u, c;\n            if (e == null) throw new TypeError(\"Client was passed a null or undefined query\");\n            return typeof e.submit == \"function\" ? (o = e.query_timeout || this.connectionParameters.query_timeout, s = i = e, typeof t == \"function\" && (i.callback = i.callback || t)) : (o = this.connectionParameters.query_timeout, i = new Ys(e, t, n), i.callback || (s = new this._Promise((l, f)=>{\n                i.callback = (y, g)=>y ? f(y) : l(g);\n            }))), o && (c = i.callback, u = setTimeout(()=>{\n                var l = new Error(\"Query read timeout\");\n                m.nextTick(()=>{\n                    i.handleError(l, this.connection);\n                }), c(l), i.callback = ()=>{};\n                var f = this.queryQueue.indexOf(i);\n                f > -1 && this.queryQueue.splice(f, 1), this._pulseQueryQueue();\n            }, o), i.callback = (l, f)=>{\n                clearTimeout(u), c(l, f);\n            }), this.binary && !i.binary && (i.binary = !0), i._result && !i._result._types && (i._result._types = this._types), this._queryable ? this._ending ? (m.nextTick(()=>{\n                i.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            }), s) : (this.queryQueue.push(i), this._pulseQueryQueue(), s) : (m.nextTick(()=>{\n                i.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            }), s);\n        }\n        ref() {\n            this.connection.ref();\n        }\n        unref() {\n            this.connection.unref();\n        }\n        end(e) {\n            if (this._ending = !0, !this.connection._connecting) if (e) e();\n            else return this._Promise.resolve();\n            if (this.activeQuery || !this._queryable ? this.connection.stream.destroy() : this.connection.end(), e) this.connection.once(\"end\", e);\n            else return new this._Promise((t)=>{\n                this.connection.once(\"end\", t);\n            });\n        }\n    };\n    a(Sn, \"Client\");\n    var kt = Sn;\n    kt.Query = Ys;\n    Zs.exports = kt;\n});\nvar ro = I((Xh, to)=>{\n    \"use strict\";\n    p();\n    var tl = me().EventEmitter, Xs = a(function() {}, \"NOOP\"), eo = a((r, e)=>{\n        let t = r.findIndex(e);\n        return t === -1 ? void 0 : r.splice(t, 1)[0];\n    }, \"removeWhere\"), Cn = class Cn {\n        constructor(e, t, n){\n            this.client = e, this.idleListener = t, this.timeoutId = n;\n        }\n    };\n    a(Cn, \"IdleItem\");\n    var En = Cn, _n = class _n {\n        constructor(e){\n            this.callback = e;\n        }\n    };\n    a(_n, \"PendingItem\");\n    var qe = _n;\n    function rl() {\n        throw new Error(\"Release called on client which has already been released to the pool.\");\n    }\n    a(rl, \"throwOnDoubleRelease\");\n    function Mt(r, e) {\n        if (e) return {\n            callback: e,\n            result: void 0\n        };\n        let t, n, i = a(function(o, u) {\n            o ? t(o) : n(u);\n        }, \"cb\"), s = new r(function(o, u) {\n            n = o, t = u;\n        }).catch((o)=>{\n            throw Error.captureStackTrace(o), o;\n        });\n        return {\n            callback: i,\n            result: s\n        };\n    }\n    a(Mt, \"promisify\");\n    function nl(r, e) {\n        return a(function t(n) {\n            n.client = e, e.removeListener(\"error\", t), e.on(\"error\", ()=>{\n                r.log(\"additional client error after disconnection due to error\", n);\n            }), r._remove(e), r.emit(\"error\", n, e);\n        }, \"idleListener\");\n    }\n    a(nl, \"makeIdleListener\");\n    var Tn = class Tn extends tl {\n        constructor(e, t){\n            super(), this.options = Object.assign({}, e), e != null && \"password\" in e && Object.defineProperty(this.options, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: e.password\n            }), e != null && e.ssl && e.ssl.key && Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: !1\n            }), this.options.max = this.options.max || this.options.poolSize || 10, this.options.maxUses = this.options.maxUses || 1 / 0, this.options.allowExitOnIdle = this.options.allowExitOnIdle || !1, this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0, this.log = this.options.log || function() {}, this.Client = this.options.Client || t || ot().Client, this.Promise = this.options.Promise || w.Promise, typeof this.options.idleTimeoutMillis > \"u\" && (this.options.idleTimeoutMillis = 1e4), this._clients = [], this._idle = [], this._expired = new WeakSet, this._pendingQueue = [], this._endCallback = void 0, this.ending = !1, this.ended = !1;\n        }\n        _isFull() {\n            return this._clients.length >= this.options.max;\n        }\n        _pulseQueue() {\n            if (this.log(\"pulse queue\"), this.ended) {\n                this.log(\"pulse queue ended\");\n                return;\n            }\n            if (this.ending) {\n                this.log(\"pulse queue on ending\"), this._idle.length && this._idle.slice().map((t)=>{\n                    this._remove(t.client);\n                }), this._clients.length || (this.ended = !0, this._endCallback());\n                return;\n            }\n            if (!this._pendingQueue.length) {\n                this.log(\"no queued requests\");\n                return;\n            }\n            if (!this._idle.length && this._isFull()) return;\n            let e = this._pendingQueue.shift();\n            if (this._idle.length) {\n                let t = this._idle.pop();\n                clearTimeout(t.timeoutId);\n                let n = t.client;\n                n.ref && n.ref();\n                let i = t.idleListener;\n                return this._acquireClient(n, e, i, !1);\n            }\n            if (!this._isFull()) return this.newClient(e);\n            throw new Error(\"unexpected condition\");\n        }\n        _remove(e) {\n            let t = eo(this._idle, (n)=>n.client === e);\n            t !== void 0 && clearTimeout(t.timeoutId), this._clients = this._clients.filter((n)=>n !== e), e.end(), this.emit(\"remove\", e);\n        }\n        connect(e) {\n            if (this.ending) {\n                let i = new Error(\"Cannot use a pool after calling end on the pool\");\n                return e ? e(i) : this.Promise.reject(i);\n            }\n            let t = Mt(this.Promise, e), n = t.result;\n            if (this._isFull() || this._idle.length) {\n                if (this._idle.length && m.nextTick(()=>this._pulseQueue()), !this.options.connectionTimeoutMillis) return this._pendingQueue.push(new qe(t.callback)), n;\n                let i = a((u, c, l)=>{\n                    clearTimeout(o), t.callback(u, c, l);\n                }, \"queueCallback\"), s = new qe(i), o = setTimeout(()=>{\n                    eo(this._pendingQueue, (u)=>u.callback === i), s.timedOut = !0, t.callback(new Error(\"timeout exceeded when trying to connect\"));\n                }, this.options.connectionTimeoutMillis);\n                return o.unref && o.unref(), this._pendingQueue.push(s), n;\n            }\n            return this.newClient(new qe(t.callback)), n;\n        }\n        newClient(e) {\n            let t = new this.Client(this.options);\n            this._clients.push(t);\n            let n = nl(this, t);\n            this.log(\"checking client timeout\");\n            let i, s = !1;\n            this.options.connectionTimeoutMillis && (i = setTimeout(()=>{\n                this.log(\"ending client due to timeout\"), s = !0, t.connection ? t.connection.stream.destroy() : t.end();\n            }, this.options.connectionTimeoutMillis)), this.log(\"connecting new client\"), t.connect((o)=>{\n                if (i && clearTimeout(i), t.on(\"error\", n), o) this.log(\"client failed to connect\", o), this._clients = this._clients.filter((u)=>u !== t), s && (o = new Error(\"Connection terminated due to connection timeout\", {\n                    cause: o\n                })), this._pulseQueue(), e.timedOut || e.callback(o, void 0, Xs);\n                else {\n                    if (this.log(\"new client connected\"), this.options.maxLifetimeSeconds !== 0) {\n                        let u = setTimeout(()=>{\n                            this.log(\"ending client due to expired lifetime\"), this._expired.add(t), this._idle.findIndex((l)=>l.client === t) !== -1 && this._acquireClient(t, new qe((l, f, y)=>y()), n, !1);\n                        }, this.options.maxLifetimeSeconds * 1e3);\n                        u.unref(), t.once(\"end\", ()=>clearTimeout(u));\n                    }\n                    return this._acquireClient(t, e, n, !0);\n                }\n            });\n        }\n        _acquireClient(e, t, n, i) {\n            i && this.emit(\"connect\", e), this.emit(\"acquire\", e), e.release = this._releaseOnce(e, n), e.removeListener(\"error\", n), t.timedOut ? i && this.options.verify ? this.options.verify(e, e.release) : e.release() : i && this.options.verify ? this.options.verify(e, (s)=>{\n                if (s) return e.release(s), t.callback(s, void 0, Xs);\n                t.callback(void 0, e, e.release);\n            }) : t.callback(void 0, e, e.release);\n        }\n        _releaseOnce(e, t) {\n            let n = !1;\n            return (i)=>{\n                n && rl(), n = !0, this._release(e, t, i);\n            };\n        }\n        _release(e, t, n) {\n            if (e.on(\"error\", t), e._poolUseCount = (e._poolUseCount || 0) + 1, this.emit(\"release\", n, e), n || this.ending || !e._queryable || e._ending || e._poolUseCount >= this.options.maxUses) {\n                e._poolUseCount >= this.options.maxUses && this.log(\"remove expended client\"), this._remove(e), this._pulseQueue();\n                return;\n            }\n            if (this._expired.has(e)) {\n                this.log(\"remove expired client\"), this._expired.delete(e), this._remove(e), this._pulseQueue();\n                return;\n            }\n            let s;\n            this.options.idleTimeoutMillis && (s = setTimeout(()=>{\n                this.log(\"remove idle client\"), this._remove(e);\n            }, this.options.idleTimeoutMillis), this.options.allowExitOnIdle && s.unref()), this.options.allowExitOnIdle && e.unref(), this._idle.push(new En(e, t, s)), this._pulseQueue();\n        }\n        query(e, t, n) {\n            if (typeof e == \"function\") {\n                let s = Mt(this.Promise, e);\n                return b(function() {\n                    return s.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n                }), s.result;\n            }\n            typeof t == \"function\" && (n = t, t = void 0);\n            let i = Mt(this.Promise, n);\n            return n = i.callback, this.connect((s, o)=>{\n                if (s) return n(s);\n                let u = !1, c = a((l)=>{\n                    u || (u = !0, o.release(l), n(l));\n                }, \"onError\");\n                o.once(\"error\", c), this.log(\"dispatching query\");\n                try {\n                    o.query(e, t, (l, f)=>{\n                        if (this.log(\"query dispatched\"), o.removeListener(\"error\", c), !u) return u = !0, o.release(l), l ? n(l) : n(void 0, f);\n                    });\n                } catch (l) {\n                    return o.release(l), n(l);\n                }\n            }), i.result;\n        }\n        end(e) {\n            if (this.log(\"ending\"), this.ending) {\n                let n = new Error(\"Called end on pool more than once\");\n                return e ? e(n) : this.Promise.reject(n);\n            }\n            this.ending = !0;\n            let t = Mt(this.Promise, e);\n            return this._endCallback = t.callback, this._pulseQueue(), t.result;\n        }\n        get waitingCount() {\n            return this._pendingQueue.length;\n        }\n        get idleCount() {\n            return this._idle.length;\n        }\n        get expiredCount() {\n            return this._clients.reduce((e, t)=>e + (this._expired.has(t) ? 1 : 0), 0);\n        }\n        get totalCount() {\n            return this._clients.length;\n        }\n    };\n    a(Tn, \"Pool\");\n    var An = Tn;\n    to.exports = An;\n});\nvar no = {};\nne(no, {\n    default: ()=>il\n});\nvar il, io = z(()=>{\n    \"use strict\";\n    p();\n    il = {};\n});\nvar so = I((np, sl)=>{\n    sl.exports = {\n        name: \"pg\",\n        version: \"8.8.0\",\n        description: \"PostgreSQL client - pure javascript & libpq with the same API\",\n        keywords: [\n            \"database\",\n            \"libpq\",\n            \"pg\",\n            \"postgre\",\n            \"postgres\",\n            \"postgresql\",\n            \"rdbms\"\n        ],\n        homepage: \"https://github.com/brianc/node-postgres\",\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/brianc/node-postgres.git\",\n            directory: \"packages/pg\"\n        },\n        author: \"Brian Carlson <brian.m.carlson@gmail.com>\",\n        main: \"./lib\",\n        dependencies: {\n            \"buffer-writer\": \"2.0.0\",\n            \"packet-reader\": \"1.0.0\",\n            \"pg-connection-string\": \"^2.5.0\",\n            \"pg-pool\": \"^3.5.2\",\n            \"pg-protocol\": \"^1.5.0\",\n            \"pg-types\": \"^2.1.0\",\n            pgpass: \"1.x\"\n        },\n        devDependencies: {\n            async: \"2.6.4\",\n            bluebird: \"3.5.2\",\n            co: \"4.6.0\",\n            \"pg-copy-streams\": \"0.3.0\"\n        },\n        peerDependencies: {\n            \"pg-native\": \">=3.0.1\"\n        },\n        peerDependenciesMeta: {\n            \"pg-native\": {\n                optional: !0\n            }\n        },\n        scripts: {\n            test: \"make test-all\"\n        },\n        files: [\n            \"lib\",\n            \"SPONSORS.md\"\n        ],\n        license: \"MIT\",\n        engines: {\n            node: \">= 8.0.0\"\n        },\n        gitHead: \"c99fb2c127ddf8d712500db2c7b9a5491a178655\"\n    };\n});\nvar uo = I((ip, ao)=>{\n    \"use strict\";\n    p();\n    var oo = me().EventEmitter, ol = (it(), D(nt)), In = rt(), Qe = ao.exports = function(r, e, t) {\n        oo.call(this), r = In.normalizeQueryConfig(r, e, t), this.text = r.text, this.values = r.values, this.name = r.name, this.callback = r.callback, this.state = \"new\", this._arrayMode = r.rowMode === \"array\", this._emitRowEvents = !1, this.on(\"newListener\", (function(n) {\n            n === \"row\" && (this._emitRowEvents = !0);\n        }).bind(this));\n    };\n    ol.inherits(Qe, oo);\n    var al = {\n        sqlState: \"code\",\n        statementPosition: \"position\",\n        messagePrimary: \"message\",\n        context: \"where\",\n        schemaName: \"schema\",\n        tableName: \"table\",\n        columnName: \"column\",\n        dataTypeName: \"dataType\",\n        constraintName: \"constraint\",\n        sourceFile: \"file\",\n        sourceLine: \"line\",\n        sourceFunction: \"routine\"\n    };\n    Qe.prototype.handleError = function(r) {\n        var e = this.native.pq.resultErrorFields();\n        if (e) for(var t in e){\n            var n = al[t] || t;\n            r[n] = e[t];\n        }\n        this.callback ? this.callback(r) : this.emit(\"error\", r), this.state = \"error\";\n    };\n    Qe.prototype.then = function(r, e) {\n        return this._getPromise().then(r, e);\n    };\n    Qe.prototype.catch = function(r) {\n        return this._getPromise().catch(r);\n    };\n    Qe.prototype._getPromise = function() {\n        return this._promise ? this._promise : (this._promise = new Promise((function(r, e) {\n            this._once(\"end\", r), this._once(\"error\", e);\n        }).bind(this)), this._promise);\n    };\n    Qe.prototype.submit = function(r) {\n        this.state = \"running\";\n        var e = this;\n        this.native = r.native, r.native.arrayMode = this._arrayMode;\n        var t = a(function(s, o, u) {\n            if (r.native.arrayMode = !1, b(function() {\n                e.emit(\"_done\");\n            }), s) return e.handleError(s);\n            e._emitRowEvents && (u.length > 1 ? o.forEach((c, l)=>{\n                c.forEach((f)=>{\n                    e.emit(\"row\", f, u[l]);\n                });\n            }) : o.forEach(function(c) {\n                e.emit(\"row\", c, u);\n            })), e.state = \"end\", e.emit(\"end\", u), e.callback && e.callback(null, u);\n        }, \"after\");\n        if (m.domain && (t = m.domain.bind(t)), this.name) {\n            this.name.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", this.name, this.name.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n            var n = (this.values || []).map(In.prepareValue);\n            if (r.namedQueries[this.name]) {\n                if (this.text && r.namedQueries[this.name] !== this.text) {\n                    let s = new Error(`Prepa\\\nred statements must be unique - '${this.name}' was used for a different statement`);\n                    return t(s);\n                }\n                return r.native.execute(this.name, n, t);\n            }\n            return r.native.prepare(this.name, this.text, n.length, function(s) {\n                return s ? t(s) : (r.namedQueries[e.name] = e.text, e.native.execute(e.name, n, t));\n            });\n        } else if (this.values) {\n            if (!Array.isArray(this.values)) {\n                let s = new Error(\"Query values must be an array\");\n                return t(s);\n            }\n            var i = this.values.map(In.prepareValue);\n            r.native.query(this.text, i, t);\n        } else r.native.query(this.text, t);\n    };\n});\nvar ho = I((up, fo)=>{\n    \"use strict\";\n    p();\n    var ul = (io(), D(no)), cl = St(), ap = so(), co = me().EventEmitter, ll = (it(), D(nt)), fl = It(), lo = uo(), Z = fo.exports = function(r) {\n        co.call(this), r = r || {}, this._Promise = r.Promise || w.Promise, this._types = new cl(r.types), this.native = new ul({\n            types: this._types\n        }), this._queryQueue = [], this._ending = !1, this._connecting = !1, this._connected = !1, this._queryable = !0;\n        var e = this.connectionParameters = new fl(r);\n        this.user = e.user, Object.defineProperty(this, \"password\", {\n            configurable: !0,\n            enumerable: !1,\n            writable: !0,\n            value: e.password\n        }), this.database = e.database, this.host = e.host, this.port = e.port, this.namedQueries = {};\n    };\n    Z.Query = lo;\n    ll.inherits(Z, co);\n    Z.prototype._errorAllQueries = function(r) {\n        let e = a((t)=>{\n            m.nextTick(()=>{\n                t.native = this.native, t.handleError(r);\n            });\n        }, \"enqueueError\");\n        this._hasActiveQuery() && (e(this._activeQuery), this._activeQuery = null), this._queryQueue.forEach(e), this._queryQueue.length = 0;\n    };\n    Z.prototype._connect = function(r) {\n        var e = this;\n        if (this._connecting) {\n            m.nextTick(()=>r(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n            return;\n        }\n        this._connecting = !0, this.connectionParameters.getLibpqConnectionString(function(t, n) {\n            if (t) return r(t);\n            e.native.connect(n, function(i) {\n                if (i) return e.native.end(), r(i);\n                e._connected = !0, e.native.on(\"error\", function(s) {\n                    e._queryable = !1, e._errorAllQueries(s), e.emit(\"error\", s);\n                }), e.native.on(\"notification\", function(s) {\n                    e.emit(\"notification\", {\n                        channel: s.relname,\n                        payload: s.extra\n                    });\n                }), e.emit(\"connect\"), e._pulseQueryQueue(!0), r();\n            });\n        });\n    };\n    Z.prototype.connect = function(r) {\n        if (r) {\n            this._connect(r);\n            return;\n        }\n        return new this._Promise((e, t)=>{\n            this._connect((n)=>{\n                n ? t(n) : e();\n            });\n        });\n    };\n    Z.prototype.query = function(r, e, t) {\n        var n, i, s, o, u;\n        if (r == null) throw new TypeError(\"Client was passed a null or undefined query\");\n        if (typeof r.submit == \"function\") s = r.query_timeout || this.connectionParameters.query_timeout, i = n = r, typeof e == \"function\" && (r.callback = e);\n        else if (s = this.connectionParameters.query_timeout, n = new lo(r, e, t), !n.callback) {\n            let c, l;\n            i = new this._Promise((f, y)=>{\n                c = f, l = y;\n            }), n.callback = (f, y)=>f ? l(f) : c(y);\n        }\n        return s && (u = n.callback, o = setTimeout(()=>{\n            var c = new Error(\"Query read timeout\");\n            m.nextTick(()=>{\n                n.handleError(c, this.connection);\n            }), u(c), n.callback = ()=>{};\n            var l = this._queryQueue.indexOf(n);\n            l > -1 && this._queryQueue.splice(l, 1), this._pulseQueryQueue();\n        }, s), n.callback = (c, l)=>{\n            clearTimeout(o), u(c, l);\n        }), this._queryable ? this._ending ? (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client was closed and is not queryable\"));\n        }), i) : (this._queryQueue.push(n), this._pulseQueryQueue(), i) : (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        }), i);\n    };\n    Z.prototype.end = function(r) {\n        var e = this;\n        this._ending = !0, this._connected || this.once(\"connect\", this.end.bind(this, r));\n        var t;\n        return r || (t = new this._Promise(function(n, i) {\n            r = a((s)=>s ? i(s) : n(), \"cb\");\n        })), this.native.end(function() {\n            e._errorAllQueries(new Error(\"Connection terminated\")), m.nextTick(()=>{\n                e.emit(\"end\"), r && r();\n            });\n        }), t;\n    };\n    Z.prototype._hasActiveQuery = function() {\n        return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n    };\n    Z.prototype._pulseQueryQueue = function(r) {\n        if (this._connected && !this._hasActiveQuery()) {\n            var e = this._queryQueue.shift();\n            if (!e) {\n                r || this.emit(\"drain\");\n                return;\n            }\n            this._activeQuery = e, e.submit(this);\n            var t = this;\n            e.once(\"_done\", function() {\n                t._pulseQueryQueue();\n            });\n        }\n    };\n    Z.prototype.cancel = function(r) {\n        this._activeQuery === r ? this.native.cancel(function() {}) : this._queryQueue.indexOf(r) !== -1 && this._queryQueue.splice(this._queryQueue.indexOf(r), 1);\n    };\n    Z.prototype.ref = function() {};\n    Z.prototype.unref = function() {};\n    Z.prototype.setTypeParser = function(r, e, t) {\n        return this._types.setTypeParser(r, e, t);\n    };\n    Z.prototype.getTypeParser = function(r, e) {\n        return this._types.getTypeParser(r, e);\n    };\n});\nvar Pn = I((fp, po)=>{\n    \"use strict\";\n    p();\n    po.exports = ho();\n});\nvar ot = I((pp, at)=>{\n    \"use strict\";\n    p();\n    var hl = Js(), pl = tt(), dl = vn(), yl = ro(), { DatabaseError: ml } = gn(), gl = a((r)=>{\n        var e;\n        return e = class extends yl {\n            constructor(n){\n                super(n, r);\n            }\n        }, a(e, \"BoundPool\"), e;\n    }, \"poolFactory\"), Rn = a(function(r) {\n        this.defaults = pl, this.Client = r, this.Query = this.Client.Query, this.Pool = gl(this.Client), this._pools = [], this.Connection = dl, this.types = Je(), this.DatabaseError = ml;\n    }, \"PG\");\n    typeof m.env.NODE_PG_FORCE_NATIVE < \"u\" ? at.exports = new Rn(Pn()) : (at.exports = new Rn(hl), Object.defineProperty(at.exports, \"native\", {\n        configurable: !0,\n        enumerable: !1,\n        get () {\n            var r = null;\n            try {\n                r = new Rn(Pn());\n            } catch (e) {\n                if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n            }\n            return Object.defineProperty(at.exports, \"native\", {\n                value: r\n            }), r;\n        }\n    }));\n});\np();\np();\nWe();\nzt();\np();\nvar fa = Object.defineProperty, ha = Object.defineProperties, pa = Object.getOwnPropertyDescriptors, gi = Object.getOwnPropertySymbols, da = Object.prototype.hasOwnProperty, ya = Object.prototype.propertyIsEnumerable, wi = a((r, e, t)=>e in r ? fa(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, \"__defNormalProp\"), ma = a((r, e)=>{\n    for(var t in e || (e = {}))da.call(e, t) && wi(r, t, e[t]);\n    if (gi) for (var t of gi(e))ya.call(e, t) && wi(r, t, e[t]);\n    return r;\n}, \"__spreadValues\"), ga = a((r, e)=>ha(r, pa(e)), \"__spreadProps\"), wa = 1008e3, bi = new Uint8Array(new Uint16Array([\n    258\n]).buffer)[0] === 2, ba = new TextDecoder, Kt = new TextEncoder, dt = Kt.encode(\"0123456789abcdef\"), yt = Kt.encode(\"0123456789ABCDEF\"), va = Kt.encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\nvar vi = va.slice();\nvi[62] = 45;\nvi[63] = 95;\nvar He, mt;\nfunction xa(r, { alphabet: e, scratchArr: t } = {}) {\n    if (!He) if (He = new Uint16Array(256), mt = new Uint16Array(256), bi) for(let C = 0; C < 256; C++)He[C] = dt[C & 15] << 8 | dt[C >>> 4], mt[C] = yt[C & 15] << 8 | yt[C >>> 4];\n    else for(let C = 0; C < 256; C++)He[C] = dt[C & 15] | dt[C >>> 4] << 8, mt[C] = yt[C & 15] | yt[C >>> 4] << 8;\n    r.byteOffset % 4 !== 0 && (r = new Uint8Array(r));\n    let n = r.length, i = n >>> 1, s = n >>> 2, o = t || new Uint16Array(n), u = new Uint32Array(r.buffer, r.byteOffset, s), c = new Uint32Array(o.buffer, o.byteOffset, i), l = e === \"upper\" ? mt : He, f = 0, y = 0, g;\n    if (bi) for(; f < s;)g = u[f++], c[y++] = l[g >>> 8 & 255] << 16 | l[g & 255], c[y++] = l[g >>> 24] << 16 | l[g >>> 16 & 255];\n    else for(; f < s;)g = u[f++], c[y++] = l[g >>> 24] << 16 | l[g >>> 16 & 255], c[y++] = l[g >>> 8 & 255] << 16 | l[g & 255];\n    for(f <<= 2; f < n;)o[f] = l[r[f++]];\n    return ba.decode(o.subarray(0, n));\n}\na(xa, \"_toHex\");\nfunction Sa(r, e = {}) {\n    let t = \"\", n = r.length, i = wa >>> 1, s = Math.ceil(n / i), o = new Uint16Array(s > 1 ? i : n);\n    for(let u = 0; u < s; u++){\n        let c = u * i, l = c + i;\n        t += xa(r.subarray(c, l), ga(ma({}, e), {\n            scratchArr: o\n        }));\n    }\n    return t;\n}\na(Sa, \"_toHexChunked\");\nfunction xi(r, e = {}) {\n    return e.alphabet !== \"upper\" && typeof r.toHex == \"function\" ? r.toHex() : Sa(r, e);\n}\na(xi, \"toHex\");\np();\nvar gt = class gt {\n    constructor(e, t){\n        this.strings = e;\n        this.values = t;\n    }\n    toParameterizedQuery(e = {\n        query: \"\",\n        params: []\n    }) {\n        let { strings: t, values: n } = this;\n        for(let i = 0, s = t.length; i < s; i++)if (e.query += t[i], i < n.length) {\n            let o = n[i];\n            if (o instanceof Ge) e.query += o.sql;\n            else if (o instanceof Ae) if (o.queryData instanceof gt) o.queryData.toParameterizedQuery(e);\n            else {\n                if (o.queryData.params?.length) throw new Error(\"This query is not composable\");\n                e.query += o.queryData.query;\n            }\n            else {\n                let { params: u } = e;\n                u.push(o), e.query += \"$\" + u.length, (o instanceof d || ArrayBuffer.isView(o)) && (e.query += \"::bytea\");\n            }\n        }\n        return e;\n    }\n};\na(gt, \"SqlTemplate\");\nvar $e = gt, Yt = class Yt {\n    constructor(e){\n        this.sql = e;\n    }\n};\na(Yt, \"UnsafeRawSql\");\nvar Ge = Yt;\nvar ss = xe(St()), os = xe(rt());\nvar At = class At extends Error {\n    constructor(t){\n        super(t);\n        E(this, \"name\", \"NeonDbError\");\n        E(this, \"severity\");\n        E(this, \"code\");\n        E(this, \"detail\");\n        E(this, \"hint\");\n        E(this, \"position\");\n        E(this, \"internalPosition\");\n        E(this, \"internalQuery\");\n        E(this, \"where\");\n        E(this, \"schema\");\n        E(this, \"table\");\n        E(this, \"column\");\n        E(this, \"dataType\");\n        E(this, \"constraint\");\n        E(this, \"file\");\n        E(this, \"line\");\n        E(this, \"routine\");\n        E(this, \"sourceError\");\n        \"captureStackTrace\" in Error && typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, At);\n    }\n};\na(At, \"NeonDbError\");\nvar we = At, rs = \"transaction() expects an array of queries, or a function returning an array of queries\", Pu = [\n    \"severity\",\n    \"code\",\n    \"detail\",\n    \"hint\",\n    \"position\",\n    \"internalPosition\",\n    \"internalQuery\",\n    \"where\",\n    \"schema\",\n    \"table\",\n    \"column\",\n    \"dataType\",\n    \"constraint\",\n    \"file\",\n    \"line\",\n    \"routine\"\n];\nfunction Ru(r) {\n    return r instanceof d ? \"\\\\x\" + xi(r) : r;\n}\na(Ru, \"encodeBuffersAsBytea\");\nfunction ns(r) {\n    let { query: e, params: t } = r instanceof $e ? r.toParameterizedQuery() : r;\n    return {\n        query: e,\n        params: t.map((n)=>Ru((0, os.prepareValue)(n)))\n    };\n}\na(ns, \"prepareQuery\");\nfunction as(r, { arrayMode: e, fullResults: t, fetchOptions: n, isolationLevel: i, readOnly: s, deferrable: o, authToken: u } = {}) {\n    if (!r) throw new Error(\"No database connection string was provided to `neon()`. Perhaps an environment variable has not been set?\");\n    let c;\n    try {\n        c = Vt(r);\n    } catch  {\n        throw new Error(\"Database connection string provided to `neon()` is not a valid URL. Connection string: \" + String(r));\n    }\n    let { protocol: l, username: f, hostname: y, port: g, pathname: A } = c;\n    if (l !== \"postgres:\" && l !== \"postgresql:\" || !f || !y || !A) throw new Error(\"Database connection string format for `neon()` should be: postgresql://user:password@host.tld/dbname?option=value\");\n    function C(P, ...L) {\n        if (!(Array.isArray(P) && Array.isArray(P.raw) && Array.isArray(L))) throw new Error('This function can now be called only as a tagged-template function: sql`SELECT ${value}`, not sql(\"SELECT $1\", [value], options). For a conventional function call with value placeholders ($1, $2, etc.), use sql.query(\"SELECT $1\", [value], options).');\n        return new Ae(Q, new $e(P, L));\n    }\n    a(C, \"templateFn\"), C.query = (P, L, _)=>new Ae(Q, {\n            query: P,\n            params: L ?? []\n        }, _), C.unsafe = (P)=>new Ge(P), C.transaction = async (P, L)=>{\n        if (typeof P == \"function\" && (P = P(C)), !Array.isArray(P)) throw new Error(rs);\n        P.forEach((H)=>{\n            if (!(H instanceof Ae)) throw new Error(rs);\n        });\n        let _ = P.map((H)=>H.queryData), x = P.map((H)=>H.opts ?? {});\n        return Q(_, x, L);\n    };\n    async function Q(P, L, _) {\n        let { fetchEndpoint: x, fetchFunction: H } = ge, le = Array.isArray(P) ? {\n            queries: P.map((J)=>ns(J))\n        } : ns(P), N = n ?? {}, ie = e ?? !1, se = t ?? !1, oe = i, B = s, $ = o;\n        _ !== void 0 && (_.fetchOptions !== void 0 && (N = {\n            ...N,\n            ..._.fetchOptions\n        }), _.arrayMode !== void 0 && (ie = _.arrayMode), _.fullResults !== void 0 && (se = _.fullResults), _.isolationLevel !== void 0 && (oe = _.isolationLevel), _.readOnly !== void 0 && (B = _.readOnly), _.deferrable !== void 0 && ($ = _.deferrable)), L !== void 0 && !Array.isArray(L) && L.fetchOptions !== void 0 && (N = {\n            ...N,\n            ...L.fetchOptions\n        });\n        let fe = u;\n        !Array.isArray(L) && L?.authToken !== void 0 && (fe = L.authToken);\n        let Ce = typeof x == \"function\" ? x(y, g, {\n            jwtAuth: fe !== void 0\n        }) : x, he = {\n            \"Neon-Connection-String\": r,\n            \"Neon-Raw-Text-Output\": \"true\",\n            \"Neon-Array-Mode\": \"true\"\n        }, _e = await Bu(fe);\n        _e && (he.Authorization = `Bearer ${_e}`), Array.isArray(P) && (oe !== void 0 && (he[\"Neon-Batch-Isolation-Level\"] = oe), B !== void 0 && (he[\"Neon-Batch-Read-Only\"] = String(B)), $ !== void 0 && (he[\"Neon-Batch-Deferrable\"] = String($)));\n        let ae;\n        try {\n            ae = await (H ?? fetch)(Ce, {\n                method: \"POST\",\n                body: JSON.stringify(le),\n                headers: he,\n                ...N\n            });\n        } catch (J) {\n            let j = new we(`Error connecting to database: ${J}`);\n            throw j.sourceError = J, j;\n        }\n        if (ae.ok) {\n            let J = await ae.json();\n            if (Array.isArray(P)) {\n                let j = J.results;\n                if (!Array.isArray(j)) throw new we(\"Neon internal error: unexpected result format\");\n                return j.map((X, V)=>{\n                    let Ne = L[V] ?? {}, wo = Ne.arrayMode ?? ie, bo = Ne.fullResults ?? se;\n                    return is(X, {\n                        arrayMode: wo,\n                        fullResults: bo,\n                        types: Ne.types\n                    });\n                });\n            } else {\n                let j = L ?? {}, X = j.arrayMode ?? ie, V = j.fullResults ?? se;\n                return is(J, {\n                    arrayMode: X,\n                    fullResults: V,\n                    types: j.types\n                });\n            }\n        } else {\n            let { status: J } = ae;\n            if (J === 400) {\n                let j = await ae.json(), X = new we(j.message);\n                for (let V of Pu)X[V] = j[V] ?? void 0;\n                throw X;\n            } else {\n                let j = await ae.text();\n                throw new we(`Server error (HTTP status ${J}): ${j}`);\n            }\n        }\n    }\n    return a(Q, \"execute\"), C;\n}\na(as, \"neon\");\nvar fr = class fr {\n    constructor(e, t, n){\n        this.execute = e;\n        this.queryData = t;\n        this.opts = n;\n    }\n    then(e, t) {\n        return this.execute(this.queryData, this.opts).then(e, t);\n    }\n    catch(e) {\n        return this.execute(this.queryData, this.opts).catch(e);\n    }\n    finally(e) {\n        return this.execute(this.queryData, this.opts).finally(e);\n    }\n};\na(fr, \"NeonQueryPromise\");\nvar Ae = fr;\nfunction is(r, { arrayMode: e, fullResults: t, types: n }) {\n    let i = new ss.default(n), s = r.fields.map((c)=>c.name), o = r.fields.map((c)=>i.getTypeParser(c.dataTypeID)), u = e === !0 ? r.rows.map((c)=>c.map((l, f)=>l === null ? null : o[f](l))) : r.rows.map((c)=>Object.fromEntries(c.map((l, f)=>[\n                s[f],\n                l === null ? null : o[f](l)\n            ])));\n    return t ? (r.viaNeonFetch = !0, r.rowAsArray = e, r.rows = u, r._parsers = o, r._types = i, r) : u;\n}\na(is, \"processQueryResult\");\nasync function Bu(r) {\n    if (typeof r == \"string\") return r;\n    if (typeof r == \"function\") try {\n        return await Promise.resolve(r());\n    } catch (e) {\n        let t = new we(\"Error getting auth token.\");\n        throw e instanceof Error && (t = new we(`Error getting auth to\\\nken: ${e.message}`)), t;\n    }\n}\na(Bu, \"getAuthToken\");\np();\nvar mo = xe(ot());\np();\nvar yo = xe(ot());\nvar Bn = class Bn extends yo.Client {\n    constructor(t){\n        super(t);\n        this.config = t;\n    }\n    get neonConfig() {\n        return this.connection.stream;\n    }\n    connect(t) {\n        let { neonConfig: n } = this;\n        n.forceDisablePgSSL && (this.ssl = this.connection.ssl = !1), this.ssl && n.useSecureWebSocket && console.warn(\"SSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = true). Double encryption will increase latency and CPU usage. It may be appropriate to disable SSL in the Postgres connection parameters or set forceDisablePgSSL = true.\");\n        let i = typeof this.config != \"string\" && this.config?.host !== void 0 || typeof this.config != \"string\" && this.config?.connectionString !== void 0 || m.env.PGHOST !== void 0, s = m.env.USER ?? m.env.USERNAME;\n        if (!i && this.host === \"localhost\" && this.user === s && this.database === s && this.password === null) throw new Error(`No database host or connection string wa\\\ns set, and key parameters have default values (host: localhost, user: ${s}, db: ${s}, password: null\\\n). Is an environment variable missing? Alternatively, if you intended to connect with these paramete\\\nrs, please set the host to 'localhost' explicitly.`);\n        let o = super.connect(t), u = n.pipelineTLS && this.ssl, c = n.pipelineConnect === \"password\";\n        if (!u && !n.pipelineConnect) return o;\n        let l = this.connection;\n        if (u && l.on(\"connect\", ()=>l.stream.emit(\"data\", \"S\")), c) {\n            l.removeAllListeners(\"authenticationCleartextPassword\"), l.removeAllListeners(\"readyForQuery\"), l.once(\"readyForQuery\", ()=>l.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)));\n            let f = this.ssl ? \"sslconnect\" : \"connect\";\n            l.on(f, ()=>{\n                this._handleAuthCleartextPassword(), this._handleReadyForQuery();\n            });\n        }\n        return o;\n    }\n    async _handleAuthSASLContinue(t) {\n        if (typeof crypto > \"u\" || crypto.subtle === void 0 || crypto.subtle.importKey === void 0) throw new Error(\"Cannot use SASL auth when `crypto.subtle` is not defined\");\n        let n = crypto.subtle, i = this.saslSession, s = this.password, o = t.data;\n        if (i.message !== \"SASLInitialResponse\" || typeof s != \"string\" || typeof o != \"string\") throw new Error(\"SASL: protocol error\");\n        let u = Object.fromEntries(o.split(\",\").map((X)=>{\n            if (!/^.=/.test(X)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let V = X[0], Ne = X.substring(2);\n            return [\n                V,\n                Ne\n            ];\n        })), c = u.r, l = u.s, f = u.i;\n        if (!c || !/^[!-+--~]+$/.test(c)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing/unprintable\");\n        if (!l || !/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(l)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base64\");\n        if (!f || !/^[1-9][0-9]*$/.test(f)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: missing/invalid iteration count\");\n        if (!c.startsWith(i.clientNonce)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        if (c.length === i.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        let y = parseInt(f, 10), g = d.from(l, \"base64\"), A = new TextEncoder, C = A.encode(s), Q = await n.importKey(\"raw\", C, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), P = new Uint8Array(await n.sign(\"HMAC\", Q, d.concat([\n            g,\n            d.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ]))), L = P;\n        for(var _ = 0; _ < y - 1; _++)P = new Uint8Array(await n.sign(\"HMAC\", Q, P)), L = d.from(L.map((X, V)=>L[V] ^ P[V]));\n        let x = L, H = await n.importKey(\"raw\", x, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), le = new Uint8Array(await n.sign(\"HMAC\", H, A.encode(\"Client Key\"))), N = await n.digest(\"SHA-256\", le), ie = \"n=*,r=\" + i.clientNonce, se = \"r=\" + c + \",s=\" + l + \",i=\" + y, oe = \"c=biws,r=\" + c, B = ie + \",\" + se + \",\" + oe, $ = await n.importKey(\"raw\", N, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var fe = new Uint8Array(await n.sign(\"HMAC\", $, A.encode(B))), Ce = d.from(le.map((X, V)=>le[V] ^ fe[V])), he = Ce.toString(\"base64\");\n        let _e = await n.importKey(\"raw\", x, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), ae = await n.sign(\"HMAC\", _e, A.encode(\"Server Key\")), J = await n.importKey(\"raw\", ae, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var j = d.from(await n.sign(\"HMAC\", J, A.encode(B)));\n        i.message = \"SASLResponse\", i.serverSignature = j.toString(\"base64\"), i.response = oe + \",p=\" + he, this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n};\na(Bn, \"NeonClient\");\nvar ut = Bn;\nWe();\nvar go = xe(It());\nfunction wl(r, e) {\n    if (e) return {\n        callback: e,\n        result: void 0\n    };\n    let t, n, i = a(function(o, u) {\n        o ? t(o) : n(u);\n    }, \"cb\"), s = new r(function(o, u) {\n        n = o, t = u;\n    });\n    return {\n        callback: i,\n        result: s\n    };\n}\na(wl, \"promisify\");\nvar Fn = class Fn extends mo.Pool {\n    constructor(){\n        super(...arguments);\n        E(this, \"Client\", ut);\n        E(this, \"hasFetchUnsupportedListeners\", !1);\n        E(this, \"addListener\", this.on);\n    }\n    on(t, n) {\n        return t !== \"error\" && (this.hasFetchUnsupportedListeners = !0), super.on(t, n);\n    }\n    query(t, n, i) {\n        if (!ge.poolQueryViaFetch || this.hasFetchUnsupportedListeners || typeof t == \"function\") return super.query(t, n, i);\n        typeof n == \"function\" && (i = n, n = void 0);\n        let s = wl(this.Promise, i);\n        i = s.callback;\n        try {\n            let o = new go.default(this.options), u = encodeURIComponent, c = encodeURI, l = `postgresql://${u(o.user)}:${u(o.password)}@${u(o.host)}\\\n/${c(o.database)}`, f = typeof t == \"string\" ? t : t.text, y = n ?? t.values ?? [];\n            as(l, {\n                fullResults: !0,\n                arrayMode: t.rowMode === \"array\"\n            }).query(f, y, {\n                types: t.types ?? this.options?.types\n            }).then((A)=>i(void 0, A)).catch((A)=>i(A));\n        } catch (o) {\n            i(o);\n        }\n        return s.result;\n    }\n};\na(Fn, \"NeonPool\");\nvar Ln = Fn;\nWe();\nvar kn = xe(ot()), _p = \"mjs\";\nvar export_DatabaseError = kn.DatabaseError;\nvar export_defaults = kn.defaults;\nvar export_types = kn.types;\n /*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neondatabase/serverless/index.mjs\n");

/***/ })

};
;